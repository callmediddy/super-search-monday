{"version":3,"sources":["logo_small.png","logo.png","views/SearchView.js","views/HistoryView.js","views/OptionSelection.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","monday","mondaySdk","Option","Select","Panel","Collapse","qna","require","SearchView","props","useState","dataLoading","setDataLoading","resultsLoading","setResultsLoading","boardGroups","setBoardGroups","boardColumns","setBoardColumns","allData","setAllData","allResults","setAllResults","wiki","setWiki","isMounted","setIsMounted","boardId","setBoardId","model","setModel","location","state","question","setQuestion","dataSource","setDataSource","resultsColumns","setResultsColumns","tableDataSource","setTableDataSource","tableDataColumns","setTableDataColumns","groups","searchGroups","setSearchGroups","columns","searchColumns","setSearchColumns","searchType","setSearchType","responseView","setResponseView","itemIdToCorpusIdx","setItemIdToCorpusIdx","getQAutoComplete","setGetQAutoComplete","searchHistory","setSearchHistory","backButton","useHistory","optionsWithDisabled","label","BookOutlined","value","BorderlessTableOutlined","groupMenu","mode","style","width","placeholder","defaultValue","onChange","length","splice","push","optionLabelProp","map","group","index","id","title","key","className","fuseOptionsWithExact","includeMatches","keys","fuseOptionsWithFuzzy","columnMenu","column","typeOfSearchMenu","onSelect","openItemModal","item","a","execute","itemId","history","Set","add","finalHistory","Array","from","storage","instance","setItem","JSON","stringify","findAnswers","answers","message","confirmButton","cancelButton","excludeCancelButton","type","timeout","then","res","confirm","console","log","fuse","Fuse","boards","items","search","answerDataSource","i","name","answerColumns","dataIndex","render","onClick","itemIdsToFetch","arrayItemIdsToFetch","api","data","load","runModel","getItem","resp","parse","savedItems","getParamsForSave","createWiki","corpus","setSearchColumnIds","setSearchGroupIds","itemIdMap","startIndex","endIndex","has","item_name","item_id","j","column_values","column_type","column_text","text","column_id","getContext","boardIds","useEffect","newDatasource","newResultsColumns","itemIdxMap","Object","forEach","actualKey","split","keyStartIndex","parseInt","keyEndIndex","fetchFinalItems","listen","loadModel","loadSearchHistory","getBoardGroups","getAllData","onBack","subTitle","gutter","justify","LoadingOutlined","fontSize","spin","flex","height","onSearch","filter","str","match","slice","shape","size","suffix","SearchOutlined","email","span","block","defaultActiveKey","ghost","header","Group","options","e","target","optionType","buttonStyle","placement","loading","description","HistoryView","antIcon","indicator","orientation","bordered","renderItem","idx","to","pathname","Item","Meta","Card","OptionSelection","isSaved","setIsSaved","savedSearches","setSavedSearches","isDataLoading","setIsDataLoading","saved","deleteSavedItem","loadSavedItems","icon","src","logo_small","extra","actions","query","DoubleRightOutlined","DeleteOutlined","avatar","backgroundColor","CompassTwoTone","twoToneColor","color","App","settings","exact","path","component","React","Component","Boolean","window","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.b7af751f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo_small.189e6820.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.41d668c2.png\";","import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Button, PageHeader, Tooltip, AutoComplete, Row, Col, Empty, Select, Collapse, Table, Radio } from 'antd';\nimport { LoadingOutlined, SearchOutlined, BorderlessTableOutlined, BookOutlined } from '@ant-design/icons'\nimport '@tensorflow/tfjs-backend-webgl';\nimport mondaySdk from \"monday-sdk-js\";\nimport Fuse from 'fuse.js'\n\nconst monday = mondaySdk();\nconst { Option } = Select;\nconst { Panel } = Collapse;\n\nconst qna = require(\"@tensorflow-models/qna\")\n\n\nconst SearchView = (props) => {\n\n    const [dataLoading, setDataLoading] = useState(false)\n    const [resultsLoading, setResultsLoading] = useState(false)\n    const [boardGroups, setBoardGroups] = useState([])\n    const [boardColumns, setBoardColumns] = useState([])\n    const [allData, setAllData] = useState({})\n    const [allResults, setAllResults] = useState({})\n    const [wiki, setWiki] = useState(\"\")\n    const [isMounted, setIsMounted] = useState(false)\n    const [boardId, setBoardId] = useState(\"\")\n    const [model, setModel] = useState()\n    const [question, setQuestion] = useState(props.location.state.question ? props.location.state.question : \"\")\n    const [dataSource, setDataSource] = useState([])\n    const [resultsColumns, setResultsColumns] = useState([])\n    const [tableDataSource, setTableDataSource] = useState([])\n    const [tableDataColumns, setTableDataColumns] = useState([])\n    const [searchGroups, setSearchGroups] = useState(props.location.state.groups ? props.location.state.groups : [\"All Groups\"])\n    const [searchColumns, setSearchColumns] = useState(props.location.state.columns ? props.location.state.columns : [\"All Columns\"])\n    const [searchType, setSearchType] = useState(props.location.state.searchType ? props.location.state.searchType : \"question\")\n    const [responseView, setResponseView] = useState(false)\n    const [itemIdToCorpusIdx, setItemIdToCorpusIdx] = useState({})\n    const [itemAllResults, setItemAllResults] = useState({})\n    const [getQAutoComplete, setGetQAutoComplete] = useState([]);\n    const [searchHistory, setSearchHistory] = useState([])\n\n    const backButton = useHistory()\n\n    const optionsWithDisabled = [\n        { label: <BookOutlined />, value: false },\n        { label: <BorderlessTableOutlined />, value: true },\n    ];\n\n\n  const handleSearch = (value) => {\n    let res = searchHistory;\n\n    if (!value) {\n      res.slice(0, 5)\n    } else {\n        res = res.filter(str => str.match(value));\n    }\n\n    setGetQAutoComplete(res);\n  };\n\n    const groupMenu = (\n        <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"select one country\"\n            defaultValue={searchGroups}\n            onChange={getSearchGroups}\n            optionLabelProp=\"label\"\n            value={searchGroups}\n        >    \n        {boardGroups.map(function (group, index){\n            return (\n                <Option value={group.id} label={group.title} key={index}>\n                    <div className=\"demo-option-label-item\">\n                        {group.title}\n                    </div>\n                </Option>\n            )\n        })}\n        </Select>\n    );\n\n    const fuseOptionsWithExact = {\n        // isCaseSensitive: false,\n        // includeScore: false,\n        // shouldSort: true,\n        includeMatches: true,\n        // findAllMatches: false,\n        // minMatchCharLength: 1,\n        // location: 0,\n        // threshold: 0.6,\n        // distance: 100,\n        // useExtendedSearch: false,\n        // ignoreLocation: false,\n        // ignoreFieldNorm: false,\n        keys: [\n          \"name\",\n          \"column_values.text\"\n        ]\n      };\n\n      const fuseOptionsWithFuzzy = {\n        // isCaseSensitive: false,\n        // includeScore: false,\n        // shouldSort: true,\n        includeMatches: true,\n        // findAllMatches: false,\n        // minMatchCharLength: 1,\n        // location: 0,\n        // threshold: 0.6,\n        // distance: 100,\n        // useExtendedSearch: false,\n        // ignoreLocation: false,\n        // ignoreFieldNorm: false,\n        keys: [\n          \"name\",\n          \"column_values.text\"\n        ]\n      };\n      \n\n    const columnMenu = (\n        <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"select one country\"\n            defaultValue={searchColumns}\n            onChange={getSearchColumns}\n            optionLabelProp=\"label\"\n            value={searchColumns}\n        >    \n        {boardColumns.map(function (column, index){\n            return (\n                <Option value={column.id} label={column.title} key={index}>\n                    <div className=\"demo-option-label-item\">\n                        {column.title}\n                    </div>\n                </Option>\n            )\n        })}\n        </Select>\n    );\n      \n    const typeOfSearchMenu = (\n        <Select defaultValue=\"question\" style={{ width: '100%' }} onSelect={(value) => {setSearchType(value)}} >\n            <Option value=\"question\">Ask Anything</Option>\n            <Option value=\"fuzzy\">Fuzzy Search</Option>\n            <Option value=\"keywords\">Match Keywords</Option>\n        </Select>\n    )\n\n    function getSearchColumns(value){\n        if(value.length > 1){\n            if(value[0] === \"All Columns\"){\n                value.splice(0, 1)\n            }\n        }\n        if(value.length === 0){\n            value.push(\"All Columns\")\n        }\n        setSearchColumns(value)\n        // console.log(value)\n    }\n\n    function getSearchGroups(value){\n        if(value.length > 1){\n            if(value[0] === \"All Groups\"){\n                value.splice(0, 1)\n            }\n        }\n        if(value.length === 0){\n            value.push(\"All Groups\")\n        }\n        setSearchGroups(value)\n        // console.log(value)\n    }\n\n    function clickBackButton(){\n        backButton.push('/')\n    }\n\n    function getQuestionFromInput(value){\n\n        setQuestion(value)\n    }\n\n    async function openItemModal(item){\n        // monday.execute\n        // console.log(\"was clicked bahah\", id)\n        monday.execute('openItemCard', { itemId: item.key });\n    }\n\n    async function runSearch(){\n        let history = new Set(searchHistory)\n        history.add(question)\n        let finalHistory = Array.from(history)\n        setSearchHistory(finalHistory)\n        let resp = await monday.storage.instance.setItem('mop', JSON.stringify(finalHistory))\n\n\n        if(searchType === \"question\"){\n            setResultsLoading(true)\n            if(model){\n                let answers = await model.findAnswers(question, wiki)\n                setAllResults(answers)\n                if(answers.length === 0){\n                    monday.execute(\"notice\", { \n                        message: \"No results were found...\",\n                        confirmButton: \"Ask Teammates\",\n                        cancelButton: \"Dismiss\",\n                        excludeCancelButton: false,\n                        type: \"error\", // or \"error\" (red), or \"info\" (blue)\n                        timeout: 10000,\n                     }).then((res) => {\n                         if(res.confirm === true){\n                             console.log(\"Send notification to users\")\n                            // let users = \n                            // monday.api(`\n                            //     mutation {\n                            //         create_notification(\n                            //             text: \"I've got a notification for you!\" + ${question},\n                            //             user_id: ${user_id},\n                            //             target_id: ${item_id},\n                            //             target_type: Project,\n                            //             internal: true\n                            //         ) { \n                            //             id \n                            //         }\n                            //     }\n                            // `);\n                         }\n                     })\n                } else {\n                    monday.execute(\"notice\", { \n                        message: \"There were \" + answers.length + \" results found!\",\n                        type: \"success\", // or \"error\" (red), or \"info\" (blue)\n                        timeout: 10000,\n                     });\n                }\n            }\n        } else {\n\n            const fuse = (searchType === \"fuzzy\") ? new Fuse(allData.boards[0].items, fuseOptionsWithFuzzy) : new Fuse(allData.boards[0].items, fuseOptionsWithExact);\n            const answers = fuse.search(question)\n            let answerDataSource = []\n\n                for(let i = 0; i < answers.length; i++){\n                    answerDataSource.push({\n                        key: answers[i].item.id,\n                        'name': answers[i].item.name\n                    })\n                }  \n\n                let answerColumns = [\n                    {\n                        title: 'Item Name',\n                        dataIndex: 'name',\n                        key: 'name',\n                        render: (name, id) => <Button type=\"link\" onClick={async() => await openItemModal(id) }>{name}</Button>\n                    },\n                ]\n                setTableDataSource(answerDataSource)\n                setTableDataColumns(answerColumns)\n                \n                if(answers.length === 0){\n                    monday.execute(\"notice\", { \n                        message: \"No results were found...\",\n                        type: \"error\", // or \"error\" (red), or \"info\" (blue)\n                        timeout: 10000,\n                     });\n                } else {\n                    monday.execute(\"notice\", { \n                        message: \"There were \" + answers.length + \" results found!\",\n                        type: \"success\", // or \"error\" (red), or \"info\" (blue)\n                        timeout: 10000,\n                    });\n                }\n            }\n        }\n\n    useEffect(() => {\n        if(isMounted){\n            // when results change, update datasource and columns\n            let newDatasource = []\n            let newResultsColumns = []\n            let itemIdsToFetch = new Set()\n            let itemIdxMap = itemIdToCorpusIdx // this is the map\n            // for()\n            // console.log(allResults)\n            if(searchType === \"question\"){\n                for(let i = 0; i < allResults.length; i++){\n                    newDatasource.push({'Results': allResults[i].text});\n\n                    Object.keys(itemIdxMap).forEach(function(key) {\n                        \n                        let actualKey = key.split(\",\")\n                        let keyStartIndex = parseInt(actualKey[0])\n                        let keyEndIndex = parseInt( actualKey[1])\n\n                        if(allResults[i].startIndex >= keyStartIndex && allResults[i].endIndex <= keyEndIndex){\n                            itemIdsToFetch.add(parseInt(itemIdxMap[key]))\n                        }\n                        \n                    });\n                    // newDatasource[i]['key'] = i;\n                    // if(allResults[i].start)\n                }\n                if(allResults[0]){\n                    // let cols = Object.keys(allResults[0])\n                    newResultsColumns.push({\n                        title: \"Results\",\n                        dataIndex: \"Results\",\n                        key: \"Results\"\n                    })\n                    // for(let j = 0; j <= cols.length; j++){\n                    //     newResultsColumns.push({\n                    //         title: cols[j],\n                    //         dataIndex: cols[j],\n                    //         key: cols[j],\n                    //     })\n                    // }\n                }\n            } else if(searchType === \"fuzzy\"){\n                \n            }\n            setDataSource(newDatasource)\n            setResultsColumns(newResultsColumns)\n            setResultsLoading(false)\n            // console.log(\"IDs that are going to be fetched are: \", itemIdsToFetch)\n            fetchFinalItems(itemIdsToFetch)\n        }\n    }, [allResults])\n\n\n    async function fetchFinalItems(itemIdsToFetch){\n        let arrayItemIdsToFetch = Array.from(itemIdsToFetch)\n        monday.api(`query {items(ids:[${arrayItemIdsToFetch}], limit:10000) {id, name}}`)\n        .then((res) => {\n            if(res.data){\n                if(res.data.items.length > 0){\n                    let answers = res.data.items\n                    // console.log(answers)\n                    let answerDataSource = []\n\n                    for(let i = 0; i < answers.length; i++){\n                        answerDataSource.push({\n                            key: answers[i].id,\n                            'name': answers[i].name\n                        })\n                    }  \n    \n                    let answerColumns = [\n                        {\n                            title: 'Item Name',\n                            dataIndex: 'name',\n                            key: 'name',\n                            render: (name, id) => <Button type=\"link\" onClick={async() => await openItemModal(id) }>{name}</Button>\n                        },\n                    ]\n                    setTableDataSource(answerDataSource)\n                    setTableDataColumns(answerColumns)\n                }\n            }\n        })\n    }\n\n    useEffect(() => {\n        if(isMounted){\n            // console.log(dataSource)\n        }\n    }, [dataSource])\n\n    useEffect(() => {\n        if(isMounted){\n            // console.log(dataSource)\n        }\n    }, [tableDataSource, tableDataColumns])\n\n\n    useEffect(() => {\n        if(isMounted){\n            // console.log(resultsColumns)\n        }\n    }, [resultsColumns])\n\n    useEffect(() => {\n        // getBoardId()\n        if(props.location){\n            // console.log(\"This is the question\", props.location.state.question)\n        }\n        monday.listen(\"context\", getContext);\n        setDataLoading(true)\n        loadModel()\n        loadSearchHistory()\n        setIsMounted(true)\n        setDataLoading(false)\n    }, []);\n\n    useEffect(() => {\n        if(isMounted){\n            setDataLoading(true)\n            getBoardGroups()\n            getAllData()\n            setDataLoading(false)\n            // gets triggered whenever boardId changes\n            // getBoardColumns() //\n            // get other stuff dependent on boardId too!\n        }\n\n    }, [boardId])\n\n    useEffect(() => {\n        if(isMounted){\n            setDataLoading(true)\n            createWiki()\n            setDataLoading(false)\n            // console.log(\"all board data: \", allData)\n        }\n    }, [allData])\n\n    useEffect(() => {\n        // do nothing\n    }, [dataLoading])\n\n    useEffect(() => {\n        if(isMounted){\n            // add something here?\n        }\n    }, [itemIdToCorpusIdx])\n\n    useEffect(() => {\n        if(isMounted){\n            // add something here?\n            // console.log(searchHistory)\n        }\n    }, [searchHistory])\n\n    useEffect(() => {\n        if(isMounted){\n            // do something here?\n        }\n    }, [responseView])\n\n    useEffect(() => {\n        if(isMounted){\n            // do something here?\n        }\n    }, [searchType])\n\n    useEffect(() => {\n        if(isMounted){\n            setDataLoading(true)\n            createWiki()\n            setDataLoading(false)\n        }\n    }, [searchColumns, searchGroups])\n\n    async function loadModel(){\n        const runModel = await qna.load(); // importing the model\n        setModel(runModel)\n    }\n\n    async function loadSearchHistory(){\n        let resp = await monday.storage.instance.getItem('mop')\n        if(!resp || !resp.data){\n            return\n        } else {\n            if(resp.data.value !== null){\n                let history = resp.data.value;\n                setSearchHistory(JSON.parse(history))\n            }\n        }\n        // console.log(history)\n        // setSearchHistory(history)\n    }\n\n    async function saveSearch(){\n        let resp = await monday.storage.instance.getItem('boop')\n        let savedItems = []\n        if(!resp || !resp.data){\n            // create a new object\n            // do nothing\n            // return\n        } else {\n            if(resp.data.value !== null){\n                savedItems = JSON.parse(resp.data.value);\n                savedItems.push(getParamsForSave())\n                let postResp = await monday.storage.instance.setItem('boop', JSON.stringify(savedItems))\n            } else {\n                savedItems.push(getParamsForSave())\n                let postResp = await monday.storage.instance.setItem('boop', JSON.stringify(savedItems))\n            }\n        }\n        // console.log(savedItems)\n    }\n\n    function getParamsForSave(){\n        let params = {'query': question, 'groups': searchGroups, 'columns': searchColumns, 'type': searchType}\n        return params;\n    }\n\n    async function createWiki(){\n        let corpus = \"\"\n        let items = allData.boards[0].items\n        // let searchColumnIds = searchColumns.map( item => { return item.id })\n        let setSearchColumnIds = new Set(searchColumns)\n        let setSearchGroupIds = new Set(searchGroups)\n        let itemIdMap = {}\n        // console.log(searchColumns)\n        // console.log(setSearchColumnIds)\n        // let column_ids = set(searchColumns)\n        let startIndex = 0\n        let endIndex = 0\n        for(let i = 0; i < items.length; i++){\n            let item = items[i]\n            if(setSearchGroupIds.has(item.group.id) || searchGroups[0] === \"All Groups\"){\n                let item_name = items[i].name\n                let item_id = items[i].id\n                // itemIdMap[item_id] = corpus.length\n                // console.log(itemIdMap)\n                startIndex = corpus.length\n                corpus += \"This is the entry for item \" + item_name + '.'\n                for(let j = 0; j < item.column_values.length; j++){\n                    let column = item.column_values[j]\n                    let column_type = column.type;\n                    let column_text = column.text;\n                    let column_id = column.id;\n                    // console.log(column_id)\n                    if(setSearchColumnIds.has(column_id) || searchColumns[0] === \"All Columns\"){\n                        // This is going to change in a bit\n                        if(column_type === \"text\"){\n                            corpus += column_text;\n                        }\n                        if(column_type === \"date\"){\n                            corpus += \". \" + item_name + \" is due on \" + column_text + \".\"\n                        }\n                        if(column_type === \"multiple-person\"){\n                            corpus +=  \". \" + item_name + \" is assigned to \" + column_text + \".\"\n                        }\n                        if(column_id === \"status\"){\n                            corpus +=  \". \" + item_name + \" task item is \" + column_text + \".\"\n                        }\n                    }\n                }\n                endIndex = corpus.length - 1\n                itemIdMap[[startIndex, endIndex]] = item_id\n            }\n\n        }\n        setWiki(corpus)\n        setItemIdToCorpusIdx(itemIdMap)\n    }\n\n    useEffect(() => {\n        if(isMounted){\n            // do nothing\n                    console.log(wiki)\n\n        }\n    }, [wiki])\n\n    async function getContext(res){\n        setBoardId(res.data.boardIds[0])\n    }\n\n    async function getAllData(){\n        monday.api(`query {boards(ids:[${boardId}]) {items(limit:10000) {id, name, group {id}, column_values {id, text, type, value, title}}}}`)\n        .then((res) => {\n            setAllData(res.data)\n            // console.log(res.data)\n        })\n    }\n\n    async function getBoardGroups(){\n        monday.api(`query { boards(ids: ${boardId}) { columns { id title } groups { id title }} } `)\n        .then((res) => {\n            setBoardGroups(res.data.boards[0].groups)\n            setBoardColumns(res.data.boards[0].columns)\n        })\n    }\n\n    function selectResponseView(e){\n        if(e.target.value === false){\n            setResponseView(false)\n        } else {\n            setResponseView(true)\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            <PageHeader\n                className=\"site-page-header\"\n                onBack={clickBackButton}\n                title=\"Super Search\"\n                subTitle=\"Get answers from your boards!\"\n            />\n            <div className=\"site-statistic-demo-card\">\n                { dataLoading ?      \n                    <Row gutter={[16, 24]}  justify=\"center\">\n                        <LoadingOutlined style={{ fontSize: 48 }} spin />\n                    </Row> \n                    :\n                    <Row gutter={[16, 24]}>\n                        <Col flex=\"auto\">\n                            <AutoComplete\n                                style={{\n                                    width: \"100%\",\n                                    height: \"5em\"\n                                }}\n                                onSearch={handleSearch}\n                                placeholder=\"Search for a question, keyword or pattern\"\n                                shape=\"round\"\n                                size=\"large\"\n                                suffix={\n                                    <SearchOutlined className=\"site-form-item-icon\" />\n                                }\n                                value={question}\n                                onChange={getQuestionFromInput}\n                                >\n                                {getQAutoComplete.map((email) => (\n                                    <Option key={email} value={email}>\n                                    {email}\n                                    </Option>\n                                ))}\n                                </AutoComplete>\n                        </Col>\n                        <Col span={4}>\n                            <Button type=\"primary\" size=\"large\" shape=\"round\" block onClick={runSearch}>Search</Button>\n                        </Col>\n                    </Row>\n                }\n                    {boardId ?\n                    <div className=\"container\">\n                     <Row gutter={[16, 24]}>\n                        <Col flex=\"auto\">\n                            <Collapse defaultActiveKey={['0']} ghost>\n                                <Panel header=\"Advanced Options\" key=\"1\">\n                                    <Row gutter={16}>\n                                        <Col span={8}>\n                                            <label>Select groups</label>\n                                            {groupMenu}\n                                        </Col>\n                                        <Col span={8}>\n                                            <label>Select columns</label>\n                                            {columnMenu}\n                                        </Col>\n                                        <Col span={8}>\n                                            <label>Select type of search</label>\n                                            {typeOfSearchMenu}\n                                        </Col>\n                                    </Row>\n                                </Panel>\n                            </Collapse>\n                        </Col>\n                        </Row>\n                        <Row gutter={ [16, 24]}>\n                            <Col flex=\"auto\">\n                                <Radio.Group\n                                    options={optionsWithDisabled}\n                                    onChange={selectResponseView}\n                                    value={responseView}\n                                    optionType=\"button\"\n                                    buttonStyle=\"solid\"\n                                />\n                            </Col>\n                            <Col>\n                            <Tooltip placement=\"topLeft\" title=\"Click to save search parameters\">\n                                <Button onClick={saveSearch}>Save Search</Button>\n                            </Tooltip>\n                            </Col>\n                        </Row>\n                        <Row gutter={[16, 24]}>\n                            <Col flex=\"auto\">\n                                {\n                                    resultsLoading ?                                     \n                                        <Table loading dataSource={dataSource} columns={resultsColumns} />\n                                    : \n                                        responseView ?\n                                            <Table dataSource={dataSource} columns={resultsColumns} />\n                                        :\n                                            <Table dataSource={tableDataSource} columns={tableDataColumns} />\n                                    }\n                                \n                            </Col>\n                        </Row>\n                        </div>\n                         :  \n                         <Row gutter={[16, 24]}>\n\n                         <Col flex=\"auto\">\n                         <Empty\n                         description={\n                           <span>\n                             Please select a board to continue...\n                           </span>\n                         }\n                       >\n                       </Empty> \n                       </Col>\n                       </Row>\n\n                    }\n            </div>\n        </div>\n    )\n\n}\n\nexport default SearchView;","import React, { useState, useEffect } from 'react';\nimport { useHistory, Link } from \"react-router-dom\";\nimport {  PageHeader, Row, Col, List, Divider, Spin} from 'antd';\nimport { LoadingOutlined } from '@ant-design/icons';\n\nimport mondaySdk from \"monday-sdk-js\";\n\nconst monday = mondaySdk();\n\n\n\nconst HistoryView = () => {\n\n    const [searchHistory, setSearchHistory] = useState([])\n    const [dataLoading, setDataLoading] = useState(true)\n    const [isMounted, setIsMounted] = useState(false)\n    const backButton = useHistory()\n    const antIcon = <LoadingOutlined style={{ fontSize: 56 }} spin />;\n\n    function clickBackButton(){\n        backButton.push('/')\n    }\n\n    useEffect(() =>{\n        setDataLoading(true)\n        loadSearchHistory()\n        setDataLoading(false)\n        if(!isMounted){\n            setIsMounted(true)\n        }\n    }, [searchHistory, isMounted])\n\n\n    async function loadSearchHistory() {\n        let resp = await monday.storage.instance.getItem('mop')\n        if(!resp || !resp.data){\n            return\n        } else {\n            if(resp.data.value !== null){\n                let history = resp.data.value;\n                setSearchHistory(JSON.parse(history))\n            }\n        }\n        //\n    }\n\n    return (\n        <div className=\"container\">\n            <PageHeader\n                className=\"site-page-header\"\n                onBack={clickBackButton}\n                title=\"Super Search History\"\n                subTitle=\"View your past searches, all stored securely on monday.com!\"\n            />\n            <div className=\"site-statistic-demo-card\">\n            {\n                dataLoading ?                 \n                <Row justify=\"center\">\n                <Spin indicator={antIcon} />\n            </Row>\n            :\n                    \n                <Row gutter={16}>\n                    <Col flex=\"auto\">\n                <Divider orientation=\"left\">Past searches...</Divider>\n                <List\n                //   header={<div>Header</div>}\n                //   footer={<div>Footer</div>}\n                  bordered\n                  dataSource={searchHistory}\n                  renderItem={(item, idx) => (\n                      <Link to={{\n                          pathname: '/search',\n                          state: {\n                              question: item\n                          }\n                      }}>\n                            <List.Item key={idx}>\n                                {item}\n                            </List.Item>\n                      </Link>\n\n                  )}\n                />\n                </Col>\n                </Row>\n            }\n            </div>\n        </div>\n    )\n}\n\nexport default HistoryView\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Tag, Empty, Button, Row, Col, Result, Divider, Card, Avatar, Image } from 'antd';\nimport { DoubleRightOutlined, CompassTwoTone, DeleteOutlined, SearchOutlined } from '@ant-design/icons';\nimport mondaySdk from \"monday-sdk-js\";\nimport logo from './../logo.png'\nimport logo_small from './../logo_small.png'\nconst { Meta } = Card;\n\nconst monday = mondaySdk();\n\nconst OptionSelection = () => {\n\n    const [isSaved, setIsSaved] = useState(false)\n    const [savedSearches, setSavedSearches] = useState([])\n    const [isMounted, setIsMounted] = useState([])\n    const [isDataLoading, setIsDataLoading] = useState(false)\n\n    useEffect(() => {\n        setIsMounted(true)\n    }, [])\n\n    async function loadSavedItems(){\n        let resp = await monday.storage.instance.getItem('boop')\n        if(!resp || !resp.data){\n            return\n        } else {\n            if(resp.data.value !== null){\n                let saved = resp.data.value;\n                setSavedSearches(JSON.parse(saved))\n            }\n        }\n    }\n\n    async function deleteSavedItem(idx){\n        // console.log(e.value)\n        let saved = [...savedSearches]\n        // console.log(idx)\n        saved.splice(idx, 1)\n        let resp = await monday.storage.instance.setItem('boop', JSON.stringify( saved ))\n        setSavedSearches(saved)\n        // console.log(savedSearches)\n        if(saved.length === 0){\n            setIsSaved(false)\n        }\n    }\n\n    useEffect(() => {\n        if(isMounted){\n            // console.log(savedSearches)\n            if(savedSearches.length === 0){\n                setIsSaved(false)\n            } else {\n                setIsSaved(true)\n            }\n        }\n    }, [savedSearches])\n\n    useEffect(() => {\n        if(isMounted){\n            // console.log(isSaved)\n        }\n    }, [isSaved])\n\n    useEffect(() => {\n        if(isMounted){\n            // console.log(savedSearches)\n            // Do nothing\n            setIsDataLoading(true)\n            // Fetch previously saved data\n            loadSavedItems()\n            // console.log(savedSearches)\n            setIsDataLoading(false)\n        }\n    }, [isMounted])\n\n    useEffect(() => {\n        if(isMounted){\n            // console.log(savedSearches)\n            // Do nothing\n        }\n    }, [isDataLoading])\n\n\n    return (\n        <div className=\"container\">\n            <div className=\"site-statistic-demo-card\">\n                <Row gutter={16}>\n                    <Col flex=\"auto\">\n                        <Result\n                            // icon={<SearchOutlined style={{ color: '#1c1f3b' }} />}\n                            icon={<Image style={{width: \"200px\"}} src={logo_small}></Image>}\n                            title=\"Let's begin with Super Search\"\n                            subTitle=\"or you can choose to run a search from the past...\"\n                            extra={[\n                            // <Link to=\"/search\" key=\"0\">\n                                <Link to={{\n                                    pathname: '/search',\n                                    state: {\n                                        question: \"\",\n                                        searchType: \"\",\n                                        searchGroups: [\"All Groups\"],\n                                        searchColumns: [\"All Columns\"]\n                                    }\n                                    }} key=\"0\">\n                                <Button type=\"primary\" key=\"console\" size=\"large\">Go to Super Search</Button>\n                            </Link>,\n                            <Link to=\"/view/history\" key=\"2\">\n                                <Button key=\"history\" size=\"large\">View Search History</Button>\n                            </Link>,\n                            ]}\n                        />\n                    </Col>\n                </Row>\n                <Row gutter={16} justify=\"center\">\n                    <Col flex=\"auto\">\n                    <Divider orientation=\"left\">\n                        <h3>Saved Searches</h3>\n                    </Divider>\n                    {isSaved ? \n                        <Row gutter={16}>\n                            {savedSearches.map((item, idx) => (\n                            <Col span={6}>\n                            <Card\n                                actions={[\n                                // <PlayCircleTwoTone />,\n                                <Link to={{\n                                    pathname: '/search',\n                                    state: {\n                                        question: item.query,\n                                        searchType: item.type,\n                                        searchGroups: item.groups,\n                                        searchColumns: item.columns\n                                    }\n                                    }}>\n                                    <Button type=\"link\" icon={<DoubleRightOutlined />} />\n                                </Link>,\n                                <Button type=\"link\" icon={<DeleteOutlined />} onClick={async () => await deleteSavedItem()} value={idx} />\n                                ]}\n                            >\n                            <Meta\n                                avatar={<Avatar style={{backgroundColor: \"#eb4034\"}} icon={<CompassTwoTone twoToneColor='#eb4034' />} />}\n                                \n                                title={item.query}\n                                description={\n                                    <div>\n                                        {item.groups.map(item => (\n                                            <Tag color=\"blue\">{item}</Tag>\n                                        ))}\n                                        {item.columns.map(item => (\n                                            <Tag color=\"green\">{item}</Tag>\n                                        ))}\n                                        <br/>\n                                        <Tag color=\"red\">{item.type}</Tag>\n                                    </div>\n                                }\n                                />\n                            </Card>\n                            </Col>\n                            ))}\n                        </Row>\n                        :\n                            <Row gutter={[16, 24]}>\n                                <Col flex=\"auto\">\n                                    <Empty\n                                        description={\n                                        <span>\n                                            Saved searches appear here...\n                                        </span>\n                                        }\n                                    >\n                                    </Empty> \n                                </Col>\n                            </Row>\n                        }\n                    </Col>\n                </Row>\n            </div>\n        </div>\n    )\n\n}\n\nexport default OptionSelection;","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport \"./App.css\";\n// import 'antd/dist/antd.css'; // or 'antd/dist/antd.less'\nimport SearchView from './views/SearchView';\nimport HistoryView from './views/HistoryView'\nimport OptionSelection from './views/OptionSelection';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    // Default state\n    this.state = {\n      settings: {},\n      name: \"\",\n    };\n  }\n\n  componentDidMount() {\n    // TODO: set up event listeners\n  }\n\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" component={OptionSelection} key=\"1\" />\n          <Route exact path=\"/search\" component={SearchView} key=\"2\"/>\n          <Route exact path=\"/view/history\" component={HistoryView} key=\"3\"/>\n\n        </Switch>\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}