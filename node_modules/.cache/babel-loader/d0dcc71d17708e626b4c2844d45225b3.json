{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, util } from '@tensorflow/tfjs-core';\nexport function simpleAbsImpl(vals) {\n  var resultValues = new Float32Array(vals.length);\n\n  for (var i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n\n  return resultValues;\n}\nexport var abs = function abs(args) {\n  var x = args.inputs.x;\n  var cpuBackend = args.backend;\n  var resultValues = new Float32Array(util.sizeFromShape(x.shape));\n\n  if (x.dtype !== 'complex64') {\n    var values = cpuBackend.data.get(x.dataId).values;\n    resultValues = simpleAbsImpl(values);\n  } else {\n    var complexVals = cpuBackend.data.get(x.dataId);\n    var real = complexVals.complexTensorInfos.real;\n    var imag = complexVals.complexTensorInfos.imag;\n    var realVals = cpuBackend.data.get(real.dataId).values;\n    var imagVals = cpuBackend.data.get(imag.dataId).values;\n\n    for (var i = 0; i < realVals.length; i++) {\n      var _real = realVals[i];\n      var _imag = imagVals[i];\n      resultValues[i] = Math.hypot(_real, _imag);\n    }\n  }\n\n  return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport var absConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs\n};","map":{"version":3,"sources":["../../src/kernels/Abs.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQ,GAAR,EAA8D,IAA9D,QAAyE,uBAAzE;AAIA,OAAM,SAAU,aAAV,CAAwB,IAAxB,EAAwC;AAC5C,MAAM,YAAY,GAAG,IAAI,YAAJ,CAAiB,IAAI,CAAC,MAAtB,CAArB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,IAAI,CAAC,MAAzB,EAAiC,EAAE,CAAnC,EAAsC;AACpC,IAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,IAAI,CAAC,GAAL,CAAS,IAAI,CAAC,CAAD,CAAb,CAAlB;AACD;;AACD,SAAO,YAAP;AACD;AAED,OAAO,IAAM,GAAG,GAAG,SAAN,GAAM,CAAC,IAAD,EAAuD;AAAA,MACjE,CADiE,GAC5D,IAAI,CAAC,MADuD,CACjE,CADiE;AAExE,MAAM,UAAU,GAAG,IAAI,CAAC,OAAxB;AACA,MAAI,YAAY,GAAG,IAAI,YAAJ,CAAiB,IAAI,CAAC,aAAL,CAAmB,CAAC,CAAC,KAArB,CAAjB,CAAnB;;AACA,MAAI,CAAC,CAAC,KAAF,KAAY,WAAhB,EAA6B;AAC3B,QAAM,MAAM,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,EAA8B,MAA7C;AACA,IAAA,YAAY,GAAG,aAAa,CAAC,MAAD,CAA5B;AACD,GAHD,MAGO;AACL,QAAM,WAAW,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,CAAC,CAAC,MAAtB,CAApB;AACA,QAAM,IAAI,GAAG,WAAW,CAAC,kBAAZ,CAA+B,IAA5C;AACA,QAAM,IAAI,GAAG,WAAW,CAAC,kBAAZ,CAA+B,IAA5C;AACA,QAAM,QAAQ,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,IAAI,CAAC,MAAzB,EAAiC,MAAlD;AACA,QAAM,QAAQ,GAAG,UAAU,CAAC,IAAX,CAAgB,GAAhB,CAAoB,IAAI,CAAC,MAAzB,EAAiC,MAAlD;;AACA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,QAAQ,CAAC,MAA7B,EAAqC,CAAC,EAAtC,EAA0C;AACxC,UAAM,KAAI,GAAG,QAAQ,CAAC,CAAD,CAArB;AACA,UAAM,KAAI,GAAG,QAAQ,CAAC,CAAD,CAArB;AACA,MAAA,YAAY,CAAC,CAAD,CAAZ,GAAkB,IAAI,CAAC,KAAL,CAAW,KAAX,EAAiB,KAAjB,CAAlB;AACD;AACF;;AACD,SAAO,UAAU,CAAC,UAAX,CAAsB,YAAtB,EAAoC,CAAC,CAAC,KAAtC,EAA6C,SAA7C,CAAP;AACD,CApBM;AAsBP,OAAO,IAAM,SAAS,GAAiB;AACrC,EAAA,UAAU,EAAE,GADyB;AAErC,EAAA,WAAW,EAAE,KAFwB;AAGrC,EAAA,UAAU,EAAE;AAHyB,CAAhC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, util } from '@tensorflow/tfjs-core';\nexport function simpleAbsImpl(vals) {\n    const resultValues = new Float32Array(vals.length);\n    for (let i = 0; i < vals.length; ++i) {\n        resultValues[i] = Math.abs(vals[i]);\n    }\n    return resultValues;\n}\nexport const abs = (args) => {\n    const { x } = args.inputs;\n    const cpuBackend = args.backend;\n    let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n    if (x.dtype !== 'complex64') {\n        const values = cpuBackend.data.get(x.dataId).values;\n        resultValues = simpleAbsImpl(values);\n    }\n    else {\n        const complexVals = cpuBackend.data.get(x.dataId);\n        const real = complexVals.complexTensorInfos.real;\n        const imag = complexVals.complexTensorInfos.imag;\n        const realVals = cpuBackend.data.get(real.dataId).values;\n        const imagVals = cpuBackend.data.get(imag.dataId).values;\n        for (let i = 0; i < realVals.length; i++) {\n            const real = realVals[i];\n            const imag = imagVals[i];\n            resultValues[i] = Math.hypot(real, imag);\n        }\n    }\n    return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport const absConfig = {\n    kernelName: Abs,\n    backendName: 'cpu',\n    kernelFunc: abs,\n};\n//# sourceMappingURL=Abs.js.map"]},"metadata":{},"sourceType":"module"}