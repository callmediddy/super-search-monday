{"ast":null,"code":"import _slicedToArray from \"/Users/akhand/Developer/power-search/quickstart-react/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n  var isContinous = slice_util.isSliceContinous(shape, begin, size);\n  var length = util.sizeFromShape(size);\n  var xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    var flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n    return vals.subarray(flatOffset, flatOffset + length);\n  }\n\n  var outVals = util.getTypedArrayFromDType(dtype, length);\n\n  for (var i = 0; i < length; ++i) {\n    var rank = size.length;\n    var strides = util.computeStrides(size);\n    var loc = util.indexToLoc(i, rank, strides);\n    var xLoc = loc.map(function (idx, j) {\n      return idx + begin[j];\n    });\n    var xIndex = util.locToIndex(xLoc, shape.length, xStrides);\n    outVals[i] = vals[xIndex];\n  }\n\n  return outVals;\n}\nexport function slice(args) {\n  var inputs = args.inputs,\n      backend = args.backend,\n      attrs = args.attrs;\n  var x = inputs.x;\n  var begin = attrs.begin,\n      size = attrs.size;\n  assertNotComplex(x, 'slice');\n\n  var _slice_util$parseSlic = slice_util.parseSliceParams(x, begin, size),\n      _slice_util$parseSlic2 = _slicedToArray(_slice_util$parseSlic, 2),\n      $begin = _slice_util$parseSlic2[0],\n      $size = _slice_util$parseSlic2[1];\n\n  slice_util.assertParamsValid(x, $begin, $size);\n  var vals = backend.data.get(x.dataId).values;\n  var outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport var sliceConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice\n};","map":{"version":3,"sources":["../../src/kernels/Slice.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAiBA,SAA6D,KAA7D,EAAoE,UAApE,EAAiI,IAAjI,QAA4I,uBAA5I;AAGA,SAAQ,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAU,SAAV,CACF,IADE,EACgB,KADhB,EACiC,IADjC,EACiD,KADjD,EAEF,KAFE,EAEa;AACjB,MAAM,WAAW,GAAG,UAAU,CAAC,gBAAX,CAA4B,KAA5B,EAAmC,KAAnC,EAA0C,IAA1C,CAApB;AACA,MAAM,MAAM,GAAG,IAAI,CAAC,aAAL,CAAmB,IAAnB,CAAf;AACA,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAL,CAAoB,KAApB,CAAjB;;AAEA,MAAI,WAAJ,EAAiB;AACf,QAAM,UAAU,GAAG,UAAU,CAAC,iBAAX,CAA6B,KAA7B,EAAoC,QAApC,CAAnB;AACA,WAAO,IAAI,CAAC,QAAL,CAAc,UAAd,EAA0B,UAAU,GAAG,MAAvC,CAAP;AACD;;AAED,MAAM,OAAO,GAAG,IAAI,CAAC,sBAAL,CAA4B,KAA5B,EAAsD,MAAtD,CAAhB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,EAAE,CAA9B,EAAiC;AAC/B,QAAM,IAAI,GAAG,IAAI,CAAC,MAAlB;AACA,QAAM,OAAO,GAAG,IAAI,CAAC,cAAL,CAAoB,IAApB,CAAhB;AACA,QAAM,GAAG,GAAG,IAAI,CAAC,UAAL,CAAgB,CAAhB,EAAmB,IAAnB,EAAyB,OAAzB,CAAZ;AACA,QAAM,IAAI,GAAG,GAAG,CAAC,GAAJ,CAAQ,UAAC,GAAD,EAAc,CAAd;AAAA,aAAoB,GAAG,GAAG,KAAK,CAAC,CAAD,CAA/B;AAAA,KAAR,CAAb;AACA,QAAM,MAAM,GAAG,IAAI,CAAC,UAAL,CAAgB,IAAhB,EAAsB,KAAK,CAAC,MAA5B,EAAoC,QAApC,CAAf;AACA,IAAA,OAAO,CAAC,CAAD,CAAP,GAAa,IAAI,CAAC,MAAD,CAAjB;AACD;;AACD,SAAO,OAAP;AACD;AAED,OAAM,SAAU,KAAV,CACF,IADE,EACqE;AAAA,MAElE,MAFkE,GAExC,IAFwC,CAElE,MAFkE;AAAA,MAE1D,OAF0D,GAExC,IAFwC,CAE1D,OAF0D;AAAA,MAEjD,KAFiD,GAExC,IAFwC,CAEjD,KAFiD;AAAA,MAGlE,CAHkE,GAG7D,MAH6D,CAGlE,CAHkE;AAAA,MAIlE,KAJkE,GAInD,KAJmD,CAIlE,KAJkE;AAAA,MAI3D,IAJ2D,GAInD,KAJmD,CAI3D,IAJ2D;AAMzE,EAAA,gBAAgB,CAAC,CAAD,EAAI,OAAJ,CAAhB;;AANyE,8BAQjD,UAAU,CAAC,gBAAX,CAA4B,CAA5B,EAA+B,KAA/B,EAAsC,IAAtC,CARiD;AAAA;AAAA,MAQlE,MARkE;AAAA,MAQ1D,KAR0D;;AASzE,EAAA,UAAU,CAAC,iBAAX,CAA6B,CAA7B,EAAgC,MAAhC,EAAwC,KAAxC;AAEA,MAAM,IAAI,GAAG,OAAO,CAAC,IAAR,CAAa,GAAb,CAAiB,CAAC,CAAC,MAAnB,EAA2B,MAAxC;AACA,MAAM,OAAO,GAAG,SAAS,CAAC,IAAD,EAAO,MAAP,EAAe,KAAf,EAAsB,CAAC,CAAC,KAAxB,EAA+B,CAAC,CAAC,KAAjC,CAAzB;AACA,SAAO,OAAO,CAAC,cAAR,CAAuB,KAAvB,EAA8B,CAAC,CAAC,KAAhC,EAAuC,OAAvC,CAAP;AACD;AAED,OAAO,IAAM,WAAW,GAAiB;AACvC,EAAA,UAAU,EAAE,KAD2B;AAEvC,EAAA,WAAW,EAAE,KAF0B;AAGvC,EAAA,UAAU,EAAE;AAH2B,CAAlC","sourceRoot":"","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n    const isContinous = slice_util.isSliceContinous(shape, begin, size);\n    const length = util.sizeFromShape(size);\n    const xStrides = util.computeStrides(shape);\n    if (isContinous) {\n        const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n        return vals.subarray(flatOffset, flatOffset + length);\n    }\n    const outVals = util.getTypedArrayFromDType(dtype, length);\n    for (let i = 0; i < length; ++i) {\n        const rank = size.length;\n        const strides = util.computeStrides(size);\n        const loc = util.indexToLoc(i, rank, strides);\n        const xLoc = loc.map((idx, j) => idx + begin[j]);\n        const xIndex = util.locToIndex(xLoc, shape.length, xStrides);\n        outVals[i] = vals[xIndex];\n    }\n    return outVals;\n}\nexport function slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    assertNotComplex(x, 'slice');\n    const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n    slice_util.assertParamsValid(x, $begin, $size);\n    const vals = backend.data.get(x.dataId).values;\n    const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n    kernelName: Slice,\n    backendName: 'cpu',\n    kernelFunc: slice\n};\n//# sourceMappingURL=Slice.js.map"]},"metadata":{},"sourceType":"module"}