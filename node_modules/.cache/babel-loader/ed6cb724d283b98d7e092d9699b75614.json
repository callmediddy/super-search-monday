{"ast":null,"code":"var _jsxFileName = \"/Users/akhand/Developer/power-search/quickstart-react/src/views/SearchView.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Button, PageHeader, Tooltip, AutoComplete, Row, Col, Empty, Select, Collapse, Table, Radio } from 'antd';\nimport { LoadingOutlined, SearchOutlined, BorderlessTableOutlined, BookOutlined } from '@ant-design/icons';\nimport '@tensorflow/tfjs-backend-webgl';\nimport mondaySdk from \"monday-sdk-js\";\nimport Fuse from 'fuse.js';\nconst monday = mondaySdk();\nconst {\n  Option\n} = Select;\nconst {\n  Panel\n} = Collapse;\n\nconst qna = require(\"@tensorflow-models/qna\");\n\nconst SearchView = props => {\n  const [dataLoading, setDataLoading] = useState(false);\n  const [resultsLoading, setResultsLoading] = useState(false);\n  const [boardGroups, setBoardGroups] = useState([]);\n  const [boardColumns, setBoardColumns] = useState([]);\n  const [allData, setAllData] = useState({});\n  const [allResults, setAllResults] = useState({});\n  const [wiki, setWiki] = useState(\"\");\n  const [isMounted, setIsMounted] = useState(false);\n  const [boardId, setBoardId] = useState(\"\");\n  const [model, setModel] = useState();\n  const [question, setQuestion] = useState(props.location.state.question ? props.location.state.question : \"\");\n  const [dataSource, setDataSource] = useState([]);\n  const [resultsColumns, setResultsColumns] = useState([]);\n  const [tableDataSource, setTableDataSource] = useState([]);\n  const [tableDataColumns, setTableDataColumns] = useState([]);\n  const [searchGroups, setSearchGroups] = useState(props.location.state.groups ? props.location.state.groups : [\"All Groups\"]);\n  const [searchColumns, setSearchColumns] = useState(props.location.state.columns ? props.location.state.columns : [\"All Columns\"]);\n  const [searchType, setSearchType] = useState(props.location.state.searchType ? props.location.state.searchType : \"question\");\n  const [responseView, setResponseView] = useState(false);\n  const [itemIdToCorpusIdx, setItemIdToCorpusIdx] = useState({});\n  const [itemAllResults, setItemAllResults] = useState({});\n  const [getQAutoComplete, setGetQAutoComplete] = useState([]);\n  const [searchHistory, setSearchHistory] = useState([]);\n  const backButton = useHistory();\n  const optionsWithDisabled = [{\n    label: /*#__PURE__*/React.createElement(BookOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 18\n      }\n    }),\n    value: false\n  }, {\n    label: /*#__PURE__*/React.createElement(BorderlessTableOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 18\n      }\n    }),\n    value: true\n  }];\n\n  const handleSearch = value => {\n    let res = searchHistory;\n\n    if (!value) {\n      res.slice(0, 5);\n    } else {\n      res = res.filter(str => str.match(value));\n    }\n\n    setGetQAutoComplete(res);\n  };\n\n  const groupMenu = /*#__PURE__*/React.createElement(Select, {\n    mode: \"multiple\",\n    style: {\n      width: '100%'\n    },\n    placeholder: \"select one country\",\n    defaultValue: searchGroups,\n    onChange: getSearchGroups,\n    optionLabelProp: \"label\",\n    value: searchGroups,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, boardGroups.map(function (group, index) {\n    return /*#__PURE__*/React.createElement(Option, {\n      value: group.id,\n      label: group.title,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"demo-option-label-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }\n    }, group.title));\n  }));\n  const fuseOptionsWithExact = {\n    // isCaseSensitive: false,\n    // includeScore: false,\n    // shouldSort: true,\n    includeMatches: true,\n    // findAllMatches: false,\n    // minMatchCharLength: 1,\n    // location: 0,\n    // threshold: 0.6,\n    // distance: 100,\n    // useExtendedSearch: false,\n    // ignoreLocation: false,\n    // ignoreFieldNorm: false,\n    keys: [\"name\", \"column_values.text\"]\n  };\n  const fuseOptionsWithFuzzy = {\n    // isCaseSensitive: false,\n    // includeScore: false,\n    // shouldSort: true,\n    includeMatches: true,\n    // findAllMatches: false,\n    // minMatchCharLength: 1,\n    // location: 0,\n    // threshold: 0.6,\n    // distance: 100,\n    // useExtendedSearch: false,\n    // ignoreLocation: false,\n    // ignoreFieldNorm: false,\n    keys: [\"name\", \"column_values.text\"]\n  };\n  const columnMenu = /*#__PURE__*/React.createElement(Select, {\n    mode: \"multiple\",\n    style: {\n      width: '100%'\n    },\n    placeholder: \"select one country\",\n    defaultValue: searchColumns,\n    onChange: getSearchColumns,\n    optionLabelProp: \"label\",\n    value: searchColumns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, boardColumns.map(function (column, index) {\n    return /*#__PURE__*/React.createElement(Option, {\n      value: column.id,\n      label: column.title,\n      key: index,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"demo-option-label-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 21\n      }\n    }, column.title));\n  }));\n  const typeOfSearchMenu = /*#__PURE__*/React.createElement(Select, {\n    defaultValue: \"question\",\n    style: {\n      width: '100%'\n    },\n    onSelect: value => {\n      setSearchType(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Option, {\n    value: \"question\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }\n  }, \"Ask Anything\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"fuzzy\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }, \"Fuzzy Search\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"keywords\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 13\n    }\n  }, \"Match Keywords\"));\n\n  function getSearchColumns(value) {\n    if (value.length > 1) {\n      if (value[0] === \"All Columns\") {\n        value.splice(0, 1);\n      }\n    }\n\n    if (value.length === 0) {\n      value.push(\"All Columns\");\n    }\n\n    setSearchColumns(value); // console.log(value)\n  }\n\n  function getSearchGroups(value) {\n    if (value.length > 1) {\n      if (value[0] === \"All Groups\") {\n        value.splice(0, 1);\n      }\n    }\n\n    if (value.length === 0) {\n      value.push(\"All Groups\");\n    }\n\n    setSearchGroups(value); // console.log(value)\n  }\n\n  function clickBackButton() {\n    backButton.push('/');\n  }\n\n  function getQuestionFromInput(value) {\n    setQuestion(value);\n  }\n\n  async function openItemModal(item) {\n    // monday.execute\n    // console.log(\"was clicked bahah\", id)\n    monday.execute('openItemCard', {\n      itemId: item.key\n    });\n  }\n\n  async function runSearch() {\n    let history = new Set(searchHistory);\n    history.add(question);\n    let finalHistory = Array.from(history);\n    setSearchHistory(finalHistory);\n    let resp = await monday.storage.instance.setItem('mop', JSON.stringify(finalHistory));\n\n    if (searchType === \"question\") {\n      setResultsLoading(true);\n\n      if (model) {\n        let answers = await model.findAnswers(question, wiki);\n        setAllResults(answers);\n\n        if (answers.length === 0) {\n          monday.execute(\"notice\", {\n            message: \"No results were found...\",\n            confirmButton: \"Ask Teammates\",\n            cancelButton: \"Dismiss\",\n            excludeCancelButton: false,\n            type: \"error\",\n            // or \"error\" (red), or \"info\" (blue)\n            timeout: 10000\n          }).then(res => {\n            if (res.confirm === true) {\n              console.log(\"Send notification to users\"); // let users = \n              // monday.api(`\n              //     mutation {\n              //         create_notification(\n              //             text: \"I've got a notification for you!\" + ${question},\n              //             user_id: ${user_id},\n              //             target_id: ${item_id},\n              //             target_type: Project,\n              //             internal: true\n              //         ) { \n              //             id \n              //         }\n              //     }\n              // `);\n            }\n          });\n        } else {\n          monday.execute(\"notice\", {\n            message: \"There were \" + answers.length + \" results found!\",\n            type: \"success\",\n            // or \"error\" (red), or \"info\" (blue)\n            timeout: 10000\n          });\n        }\n      }\n    } else {\n      const fuse = searchType === \"fuzzy\" ? new Fuse(allData.boards[0].items, fuseOptionsWithFuzzy) : new Fuse(allData.boards[0].items, fuseOptionsWithExact);\n      const answers = fuse.search(question);\n      let answerDataSource = [];\n\n      for (let i = 0; i < answers.length; i++) {\n        answerDataSource.push({\n          key: answers[i].item.id,\n          'name': answers[i].item.name\n        });\n      }\n\n      let answerColumns = [{\n        title: 'Item Name',\n        dataIndex: 'name',\n        key: 'name',\n        render: (name, id) => /*#__PURE__*/React.createElement(Button, {\n          type: \"link\",\n          onClick: async () => await openItemModal(id),\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 47\n          }\n        }, name)\n      }];\n      setTableDataSource(answerDataSource);\n      setTableDataColumns(answerColumns);\n\n      if (answers.length === 0) {\n        monday.execute(\"notice\", {\n          message: \"No results were found...\",\n          type: \"error\",\n          // or \"error\" (red), or \"info\" (blue)\n          timeout: 10000\n        });\n      } else {\n        monday.execute(\"notice\", {\n          message: \"There were \" + answers.length + \" results found!\",\n          type: \"success\",\n          // or \"error\" (red), or \"info\" (blue)\n          timeout: 10000\n        });\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (isMounted) {\n      // when results change, update datasource and columns\n      let newDatasource = [];\n      let newResultsColumns = [];\n      let itemIdsToFetch = new Set();\n      let itemIdxMap = itemIdToCorpusIdx; // this is the map\n      // for()\n\n      console.log(allResults);\n\n      if (searchType === \"question\") {\n        for (let i = 0; i < allResults.length; i++) {\n          newDatasource.push({\n            'Results': allResults[i].text\n          });\n          Object.keys(itemIdxMap).forEach(function (key) {\n            let actualKey = key.split(\",\");\n            let keyStartIndex = parseInt(actualKey[0]);\n            let keyEndIndex = parseInt(actualKey[1]);\n\n            if (allResults[i].startIndex >= keyStartIndex && allResults[i].endIndex <= keyEndIndex) {\n              itemIdsToFetch.add(parseInt(itemIdxMap[key]));\n            }\n          }); // newDatasource[i]['key'] = i;\n          // if(allResults[i].start)\n        }\n\n        if (allResults[0]) {\n          // let cols = Object.keys(allResults[0])\n          newResultsColumns.push({\n            title: \"Results\",\n            dataIndex: \"Results\",\n            key: \"Results\"\n          }); // for(let j = 0; j <= cols.length; j++){\n          //     newResultsColumns.push({\n          //         title: cols[j],\n          //         dataIndex: cols[j],\n          //         key: cols[j],\n          //     })\n          // }\n        }\n      } else if (searchType === \"fuzzy\") {}\n\n      setDataSource(newDatasource);\n      setResultsColumns(newResultsColumns);\n      setResultsLoading(false);\n      console.log(\"IDs that are going to be fetched are: \", itemIdsToFetch);\n      fetchFinalItems(itemIdsToFetch);\n    }\n  }, [allResults]);\n\n  async function fetchFinalItems(itemIdsToFetch) {\n    let arrayItemIdsToFetch = Array.from(itemIdsToFetch);\n    monday.api(`query {items(ids:[${arrayItemIdsToFetch}], limit:10000) {id, name}}`).then(res => {\n      if (res.data) {\n        if (res.data.items.length > 0) {\n          let answers = res.data.items;\n          console.log(answers);\n          let answerDataSource = [];\n\n          for (let i = 0; i < answers.length; i++) {\n            answerDataSource.push({\n              key: answers[i].id,\n              'name': answers[i].name\n            });\n          }\n\n          let answerColumns = [{\n            title: 'Item Name',\n            dataIndex: 'name',\n            key: 'name',\n            render: (name, id) => /*#__PURE__*/React.createElement(Button, {\n              type: \"link\",\n              onClick: async () => await openItemModal(id),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 358,\n                columnNumber: 51\n              }\n            }, name)\n          }];\n          setTableDataSource(answerDataSource);\n          setTableDataColumns(answerColumns);\n        }\n      }\n    });\n  }\n\n  useEffect(() => {\n    if (isMounted) {// console.log(dataSource)\n    }\n  }, [dataSource]);\n  useEffect(() => {\n    if (isMounted) {// console.log(dataSource)\n    }\n  }, [tableDataSource, tableDataColumns]);\n  useEffect(() => {\n    if (isMounted) {// console.log(resultsColumns)\n    }\n  }, [resultsColumns]);\n  useEffect(() => {\n    // getBoardId()\n    if (props.location) {// console.log(\"This is the question\", props.location.state.question)\n    }\n\n    monday.listen(\"context\", getContext);\n    setDataLoading(true);\n    loadModel();\n    loadSearchHistory();\n    setIsMounted(true);\n    setDataLoading(false);\n  }, []);\n  useEffect(() => {\n    if (isMounted) {\n      setDataLoading(true);\n      getBoardGroups();\n      getAllData();\n      setDataLoading(false); // gets triggered whenever boardId changes\n      // getBoardColumns() //\n      // get other stuff dependent on boardId too!\n    }\n  }, [boardId]);\n  useEffect(() => {\n    if (isMounted) {\n      setDataLoading(true);\n      createWiki();\n      setDataLoading(false);\n      console.log(\"all board data: \", allData);\n    }\n  }, [allData]);\n  useEffect(() => {// do nothing\n  }, [dataLoading]);\n  useEffect(() => {\n    if (isMounted) {// add something here?\n    }\n  }, [itemIdToCorpusIdx]);\n  useEffect(() => {\n    if (isMounted) {// add something here?\n      // console.log(searchHistory)\n    }\n  }, [searchHistory]);\n  useEffect(() => {\n    if (isMounted) {// do something here?\n    }\n  }, [responseView]);\n  useEffect(() => {\n    if (isMounted) {// do something here?\n    }\n  }, [searchType]);\n  useEffect(() => {\n    if (isMounted) {\n      setDataLoading(true);\n      createWiki();\n      setDataLoading(false);\n    }\n  }, [searchColumns, searchGroups]);\n\n  async function loadModel() {\n    const runModel = await qna.load(); // importing the model\n\n    setModel(runModel);\n  }\n\n  async function loadSearchHistory() {\n    let resp = await monday.storage.instance.getItem('mop');\n\n    if (!resp || !resp.data) {\n      return;\n    } else {\n      if (resp.data.value !== null) {\n        let history = resp.data.value;\n        setSearchHistory(JSON.parse(history));\n      }\n    } // console.log(history)\n    // setSearchHistory(history)\n\n  }\n\n  async function saveSearch() {\n    let resp = await monday.storage.instance.getItem('boop');\n    let savedItems = [];\n\n    if (!resp || !resp.data) {// create a new object\n      // do nothing\n      // return\n    } else {\n      if (resp.data.value !== null) {\n        savedItems = JSON.parse(resp.data.value);\n        savedItems.push(getParamsForSave());\n        let postResp = await monday.storage.instance.setItem('boop', JSON.stringify(savedItems));\n      } else {\n        savedItems.push(getParamsForSave());\n        let postResp = await monday.storage.instance.setItem('boop', JSON.stringify(savedItems));\n      }\n    } // console.log(savedItems)\n\n  }\n\n  function getParamsForSave() {\n    let params = {\n      'query': question,\n      'groups': searchGroups,\n      'columns': searchColumns,\n      'type': searchType\n    };\n    return params;\n  }\n\n  async function createWiki() {\n    let corpus = \"\";\n    let items = allData.boards[0].items; // let searchColumnIds = searchColumns.map( item => { return item.id })\n\n    let setSearchColumnIds = new Set(searchColumns);\n    let setSearchGroupIds = new Set(searchGroups);\n    let itemIdMap = {}; // console.log(searchColumns)\n    // console.log(setSearchColumnIds)\n    // let column_ids = set(searchColumns)\n\n    let startIndex = 0;\n    let endIndex = 0;\n\n    for (let i = 0; i < items.length; i++) {\n      let item = items[i];\n\n      if (setSearchGroupIds.has(item.group.id) || searchGroups[0] === \"All Groups\") {\n        let item_name = items[i].name;\n        let item_id = items[i].id; // itemIdMap[item_id] = corpus.length\n        // console.log(itemIdMap)\n\n        startIndex = corpus.length;\n        corpus += \"This is the entry for item \" + item_name + '.';\n\n        for (let j = 0; j < item.column_values.length; j++) {\n          let column = item.column_values[j];\n          let column_type = column.type;\n          let column_text = column.text;\n          let column_id = column.id; // console.log(column_id)\n\n          if (setSearchColumnIds.has(column_id) || searchColumns[0] === \"All Columns\") {\n            // This is going to change in a bit\n            if (column_type === \"text\") {\n              corpus += column_text;\n            }\n\n            if (column_type === \"date\") {\n              corpus += \". \" + item_name + \" is due on \" + column_text + \".\";\n            }\n\n            if (column_type === \"multiple-person\") {\n              corpus += \". \" + item_name + \" is assigned to \" + column_text + \".\";\n            }\n\n            if (column_id === \"status\") {\n              corpus += \". \" + item_name + \" task item is \" + column_text + \".\";\n            }\n          }\n        }\n\n        endIndex = corpus.length - 1;\n        itemIdMap[[startIndex, endIndex]] = item_id;\n      }\n    }\n\n    setWiki(corpus);\n    setItemIdToCorpusIdx(itemIdMap);\n  }\n\n  useEffect(() => {\n    if (isMounted) {\n      // do nothing\n      console.log(wiki);\n    }\n  }, [wiki]);\n\n  async function getContext(res) {\n    setBoardId(res.data.boardIds[0]);\n  }\n\n  async function getAllData() {\n    monday.api(`query {boards(ids:[${boardId}]) {items(limit:10000) {id, name, group {id}, column_values {id, text, type, value, title}}}}`).then(res => {\n      setAllData(res.data); // console.log(res.data)\n    });\n  }\n\n  async function getBoardGroups() {\n    monday.api(`query { boards(ids: ${boardId}) { columns { id title } groups { id title }} } `).then(res => {\n      setBoardGroups(res.data.boards[0].groups);\n      setBoardColumns(res.data.boards[0].columns);\n    });\n  }\n\n  function selectResponseView(e) {\n    if (e.target.value === false) {\n      setResponseView(false);\n    } else {\n      setResponseView(true);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 592,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PageHeader, {\n    className: \"site-page-header\",\n    onBack: clickBackButton,\n    title: \"Super Search\",\n    subTitle: \"Get answers from your boards!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 593,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"site-statistic-demo-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 599,\n      columnNumber: 13\n    }\n  }, dataLoading ? /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 24],\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(LoadingOutlined, {\n    style: {\n      fontSize: 48\n    },\n    spin: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 602,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 605,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    flex: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 606,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(AutoComplete, {\n    style: {\n      width: \"100%\",\n      height: \"5em\"\n    },\n    onSearch: handleSearch,\n    placeholder: \"Search for a question, keyword or pattern\",\n    shape: \"round\",\n    size: \"large\",\n    suffix: /*#__PURE__*/React.createElement(SearchOutlined, {\n      className: \"site-form-item-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 617,\n        columnNumber: 37\n      }\n    }),\n    value: question,\n    onChange: getQuestionFromInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 607,\n      columnNumber: 29\n    }\n  }, getQAutoComplete.map(email => /*#__PURE__*/React.createElement(Option, {\n    key: email,\n    value: email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 623,\n      columnNumber: 37\n    }\n  }, email)))), /*#__PURE__*/React.createElement(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 629,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    size: \"large\",\n    shape: \"round\",\n    block: true,\n    onClick: runSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 630,\n      columnNumber: 29\n    }\n  }, \"Search\"))), boardId ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 635,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 636,\n      columnNumber: 22\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    flex: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 637,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Collapse, {\n    defaultActiveKey: ['0'],\n    ghost: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 638,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Panel, {\n    header: \"Advanced Options\",\n    key: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 640,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 642,\n      columnNumber: 45\n    }\n  }, \"Select groups\"), groupMenu), /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 645,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 45\n    }\n  }, \"Select columns\"), columnMenu), /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 649,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 650,\n      columnNumber: 45\n    }\n  }, \"Select type of search\"), typeOfSearchMenu)))))), /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 658,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    flex: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 659,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Radio.Group, {\n    options: optionsWithDisabled,\n    onChange: selectResponseView,\n    value: responseView,\n    optionType: \"button\",\n    buttonStyle: \"solid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 660,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 668,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    placement: \"topLeft\",\n    title: \"Click to save search parameters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 669,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: saveSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 670,\n      columnNumber: 33\n    }\n  }, \"Save Search\")))), /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 674,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    flex: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 675,\n      columnNumber: 29\n    }\n  }, resultsLoading ? /*#__PURE__*/React.createElement(Table, {\n    loading: true,\n    dataSource: dataSource,\n    columns: resultsColumns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 678,\n      columnNumber: 41\n    }\n  }) : responseView ? /*#__PURE__*/React.createElement(Table, {\n    dataSource: dataSource,\n    columns: resultsColumns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 681,\n      columnNumber: 45\n    }\n  }) : /*#__PURE__*/React.createElement(Table, {\n    dataSource: tableDataSource,\n    columns: tableDataColumns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 683,\n      columnNumber: 45\n    }\n  })))) : /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 26\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    flex: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 692,\n      columnNumber: 26\n    }\n  }, /*#__PURE__*/React.createElement(Empty, {\n    description: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 28\n      }\n    }, \"Please select a board to continue...\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 26\n    }\n  })))));\n};\n\nexport default SearchView;","map":{"version":3,"sources":["/Users/akhand/Developer/power-search/quickstart-react/src/views/SearchView.js"],"names":["React","useState","useEffect","useHistory","Button","PageHeader","Tooltip","AutoComplete","Row","Col","Empty","Select","Collapse","Table","Radio","LoadingOutlined","SearchOutlined","BorderlessTableOutlined","BookOutlined","mondaySdk","Fuse","monday","Option","Panel","qna","require","SearchView","props","dataLoading","setDataLoading","resultsLoading","setResultsLoading","boardGroups","setBoardGroups","boardColumns","setBoardColumns","allData","setAllData","allResults","setAllResults","wiki","setWiki","isMounted","setIsMounted","boardId","setBoardId","model","setModel","question","setQuestion","location","state","dataSource","setDataSource","resultsColumns","setResultsColumns","tableDataSource","setTableDataSource","tableDataColumns","setTableDataColumns","searchGroups","setSearchGroups","groups","searchColumns","setSearchColumns","columns","searchType","setSearchType","responseView","setResponseView","itemIdToCorpusIdx","setItemIdToCorpusIdx","itemAllResults","setItemAllResults","getQAutoComplete","setGetQAutoComplete","searchHistory","setSearchHistory","backButton","optionsWithDisabled","label","value","handleSearch","res","slice","filter","str","match","groupMenu","width","getSearchGroups","map","group","index","id","title","fuseOptionsWithExact","includeMatches","keys","fuseOptionsWithFuzzy","columnMenu","getSearchColumns","column","typeOfSearchMenu","length","splice","push","clickBackButton","getQuestionFromInput","openItemModal","item","execute","itemId","key","runSearch","history","Set","add","finalHistory","Array","from","resp","storage","instance","setItem","JSON","stringify","answers","findAnswers","message","confirmButton","cancelButton","excludeCancelButton","type","timeout","then","confirm","console","log","fuse","boards","items","search","answerDataSource","i","name","answerColumns","dataIndex","render","newDatasource","newResultsColumns","itemIdsToFetch","itemIdxMap","text","Object","forEach","actualKey","split","keyStartIndex","parseInt","keyEndIndex","startIndex","endIndex","fetchFinalItems","arrayItemIdsToFetch","api","data","listen","getContext","loadModel","loadSearchHistory","getBoardGroups","getAllData","createWiki","runModel","load","getItem","parse","saveSearch","savedItems","getParamsForSave","postResp","params","corpus","setSearchColumnIds","setSearchGroupIds","itemIdMap","has","item_name","item_id","j","column_values","column_type","column_text","column_id","boardIds","selectResponseView","e","target","fontSize","height","email"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,OAA7B,EAAsCC,YAAtC,EAAoDC,GAApD,EAAyDC,GAAzD,EAA8DC,KAA9D,EAAqEC,MAArE,EAA6EC,QAA7E,EAAuFC,KAAvF,EAA8FC,KAA9F,QAA2G,MAA3G;AACA,SAASC,eAAT,EAA0BC,cAA1B,EAA0CC,uBAA1C,EAAmEC,YAAnE,QAAuF,mBAAvF;AACA,OAAO,gCAAP;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,IAAP,MAAiB,SAAjB;AAEA,MAAMC,MAAM,GAAGF,SAAS,EAAxB;AACA,MAAM;AAAEG,EAAAA;AAAF,IAAaX,MAAnB;AACA,MAAM;AAAEY,EAAAA;AAAF,IAAYX,QAAlB;;AAEA,MAAMY,GAAG,GAAGC,OAAO,CAAC,wBAAD,CAAnB;;AAGA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAE1B,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgC5B,QAAQ,CAAC,KAAD,CAA9C;AACA,QAAM,CAAC6B,cAAD,EAAiBC,iBAAjB,IAAsC9B,QAAQ,CAAC,KAAD,CAApD;AACA,QAAM,CAAC+B,WAAD,EAAcC,cAAd,IAAgChC,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACiC,YAAD,EAAeC,eAAf,IAAkClC,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACmC,OAAD,EAAUC,UAAV,IAAwBpC,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACqC,UAAD,EAAaC,aAAb,IAA8BtC,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACuC,IAAD,EAAOC,OAAP,IAAkBxC,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACyC,SAAD,EAAYC,YAAZ,IAA4B1C,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAAC2C,OAAD,EAAUC,UAAV,IAAwB5C,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAAC6C,KAAD,EAAQC,QAAR,IAAoB9C,QAAQ,EAAlC;AACA,QAAM,CAAC+C,QAAD,EAAWC,WAAX,IAA0BhD,QAAQ,CAAC0B,KAAK,CAACuB,QAAN,CAAeC,KAAf,CAAqBH,QAArB,GAAgCrB,KAAK,CAACuB,QAAN,CAAeC,KAAf,CAAqBH,QAArD,GAAgE,EAAjE,CAAxC;AACA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BpD,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACqD,cAAD,EAAiBC,iBAAjB,IAAsCtD,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACuD,eAAD,EAAkBC,kBAAlB,IAAwCxD,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACyD,gBAAD,EAAmBC,mBAAnB,IAA0C1D,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAAC2D,YAAD,EAAeC,eAAf,IAAkC5D,QAAQ,CAAC0B,KAAK,CAACuB,QAAN,CAAeC,KAAf,CAAqBW,MAArB,GAA8BnC,KAAK,CAACuB,QAAN,CAAeC,KAAf,CAAqBW,MAAnD,GAA4D,CAAC,YAAD,CAA7D,CAAhD;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoC/D,QAAQ,CAAC0B,KAAK,CAACuB,QAAN,CAAeC,KAAf,CAAqBc,OAArB,GAA+BtC,KAAK,CAACuB,QAAN,CAAeC,KAAf,CAAqBc,OAApD,GAA8D,CAAC,aAAD,CAA/D,CAAlD;AACA,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BlE,QAAQ,CAAC0B,KAAK,CAACuB,QAAN,CAAeC,KAAf,CAAqBe,UAArB,GAAkCvC,KAAK,CAACuB,QAAN,CAAeC,KAAf,CAAqBe,UAAvD,GAAoE,UAArE,CAA5C;AACA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCpE,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACqE,iBAAD,EAAoBC,oBAApB,IAA4CtE,QAAQ,CAAC,EAAD,CAA1D;AACA,QAAM,CAACuE,cAAD,EAAiBC,iBAAjB,IAAsCxE,QAAQ,CAAC,EAAD,CAApD;AACA,QAAM,CAACyE,gBAAD,EAAmBC,mBAAnB,IAA0C1E,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAAC2E,aAAD,EAAgBC,gBAAhB,IAAoC5E,QAAQ,CAAC,EAAD,CAAlD;AAEA,QAAM6E,UAAU,GAAG3E,UAAU,EAA7B;AAEA,QAAM4E,mBAAmB,GAAG,CACxB;AAAEC,IAAAA,KAAK,eAAE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAT;AAA2BC,IAAAA,KAAK,EAAE;AAAlC,GADwB,EAExB;AAAED,IAAAA,KAAK,eAAE,oBAAC,uBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAT;AAAsCC,IAAAA,KAAK,EAAE;AAA7C,GAFwB,CAA5B;;AAMF,QAAMC,YAAY,GAAID,KAAD,IAAW;AAC9B,QAAIE,GAAG,GAAGP,aAAV;;AAEA,QAAI,CAACK,KAAL,EAAY;AACVE,MAAAA,GAAG,CAACC,KAAJ,CAAU,CAAV,EAAa,CAAb;AACD,KAFD,MAEO;AACHD,MAAAA,GAAG,GAAGA,GAAG,CAACE,MAAJ,CAAWC,GAAG,IAAIA,GAAG,CAACC,KAAJ,CAAUN,KAAV,CAAlB,CAAN;AACH;;AAEDN,IAAAA,mBAAmB,CAACQ,GAAD,CAAnB;AACD,GAVD;;AAYE,QAAMK,SAAS,gBACX,oBAAC,MAAD;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAFX;AAGI,IAAA,WAAW,EAAC,oBAHhB;AAII,IAAA,YAAY,EAAE7B,YAJlB;AAKI,IAAA,QAAQ,EAAE8B,eALd;AAMI,IAAA,eAAe,EAAC,OANpB;AAOI,IAAA,KAAK,EAAE9B,YAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASC5B,WAAW,CAAC2D,GAAZ,CAAgB,UAAUC,KAAV,EAAiBC,KAAjB,EAAuB;AACpC,wBACI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAED,KAAK,CAACE,EAArB;AAAyB,MAAA,KAAK,EAAEF,KAAK,CAACG,KAAtC;AAA6C,MAAA,GAAG,EAAEF,KAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKD,KAAK,CAACG,KADX,CADJ,CADJ;AAOH,GARA,CATD,CADJ;AAsBA,QAAMC,oBAAoB,GAAG;AACzB;AACA;AACA;AACAC,IAAAA,cAAc,EAAE,IAJS;AAKzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,IAAI,EAAE,CACJ,MADI,EAEJ,oBAFI;AAbmB,GAA7B;AAmBE,QAAMC,oBAAoB,GAAG;AAC3B;AACA;AACA;AACAF,IAAAA,cAAc,EAAE,IAJW;AAK3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,IAAAA,IAAI,EAAE,CACJ,MADI,EAEJ,oBAFI;AAbqB,GAA7B;AAoBF,QAAME,UAAU,gBACZ,oBAAC,MAAD;AACI,IAAA,IAAI,EAAC,UADT;AAEI,IAAA,KAAK,EAAE;AAAEX,MAAAA,KAAK,EAAE;AAAT,KAFX;AAGI,IAAA,WAAW,EAAC,oBAHhB;AAII,IAAA,YAAY,EAAE1B,aAJlB;AAKI,IAAA,QAAQ,EAAEsC,gBALd;AAMI,IAAA,eAAe,EAAC,OANpB;AAOI,IAAA,KAAK,EAAEtC,aAPX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASC7B,YAAY,CAACyD,GAAb,CAAiB,UAAUW,MAAV,EAAkBT,KAAlB,EAAwB;AACtC,wBACI,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAES,MAAM,CAACR,EAAtB;AAA0B,MAAA,KAAK,EAAEQ,MAAM,CAACP,KAAxC;AAA+C,MAAA,GAAG,EAAEF,KAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACKS,MAAM,CAACP,KADZ,CADJ,CADJ;AAOH,GARA,CATD,CADJ;AAsBA,QAAMQ,gBAAgB,gBAClB,oBAAC,MAAD;AAAQ,IAAA,YAAY,EAAC,UAArB;AAAgC,IAAA,KAAK,EAAE;AAAEd,MAAAA,KAAK,EAAE;AAAT,KAAvC;AAA0D,IAAA,QAAQ,EAAGR,KAAD,IAAW;AAACd,MAAAA,aAAa,CAACc,KAAD,CAAb;AAAqB,KAArG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAEI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFJ,eAGI,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAC,UAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAHJ,CADJ;;AAQA,WAASoB,gBAAT,CAA0BpB,KAA1B,EAAgC;AAC5B,QAAGA,KAAK,CAACuB,MAAN,GAAe,CAAlB,EAAoB;AAChB,UAAGvB,KAAK,CAAC,CAAD,CAAL,KAAa,aAAhB,EAA8B;AAC1BA,QAAAA,KAAK,CAACwB,MAAN,CAAa,CAAb,EAAgB,CAAhB;AACH;AACJ;;AACD,QAAGxB,KAAK,CAACuB,MAAN,KAAiB,CAApB,EAAsB;AAClBvB,MAAAA,KAAK,CAACyB,IAAN,CAAW,aAAX;AACH;;AACD1C,IAAAA,gBAAgB,CAACiB,KAAD,CAAhB,CAT4B,CAU5B;AACH;;AAED,WAASS,eAAT,CAAyBT,KAAzB,EAA+B;AAC3B,QAAGA,KAAK,CAACuB,MAAN,GAAe,CAAlB,EAAoB;AAChB,UAAGvB,KAAK,CAAC,CAAD,CAAL,KAAa,YAAhB,EAA6B;AACzBA,QAAAA,KAAK,CAACwB,MAAN,CAAa,CAAb,EAAgB,CAAhB;AACH;AACJ;;AACD,QAAGxB,KAAK,CAACuB,MAAN,KAAiB,CAApB,EAAsB;AAClBvB,MAAAA,KAAK,CAACyB,IAAN,CAAW,YAAX;AACH;;AACD7C,IAAAA,eAAe,CAACoB,KAAD,CAAf,CAT2B,CAU3B;AACH;;AAED,WAAS0B,eAAT,GAA0B;AACtB7B,IAAAA,UAAU,CAAC4B,IAAX,CAAgB,GAAhB;AACH;;AAED,WAASE,oBAAT,CAA8B3B,KAA9B,EAAoC;AAEhChC,IAAAA,WAAW,CAACgC,KAAD,CAAX;AACH;;AAED,iBAAe4B,aAAf,CAA6BC,IAA7B,EAAkC;AAC9B;AACA;AACAzF,IAAAA,MAAM,CAAC0F,OAAP,CAAe,cAAf,EAA+B;AAAEC,MAAAA,MAAM,EAAEF,IAAI,CAACG;AAAf,KAA/B;AACH;;AAED,iBAAeC,SAAf,GAA0B;AACtB,QAAIC,OAAO,GAAG,IAAIC,GAAJ,CAAQxC,aAAR,CAAd;AACAuC,IAAAA,OAAO,CAACE,GAAR,CAAYrE,QAAZ;AACA,QAAIsE,YAAY,GAAGC,KAAK,CAACC,IAAN,CAAWL,OAAX,CAAnB;AACAtC,IAAAA,gBAAgB,CAACyC,YAAD,CAAhB;AACA,QAAIG,IAAI,GAAG,MAAMpG,MAAM,CAACqG,OAAP,CAAeC,QAAf,CAAwBC,OAAxB,CAAgC,KAAhC,EAAuCC,IAAI,CAACC,SAAL,CAAeR,YAAf,CAAvC,CAAjB;;AAGA,QAAGpD,UAAU,KAAK,UAAlB,EAA6B;AACzBnC,MAAAA,iBAAiB,CAAC,IAAD,CAAjB;;AACA,UAAGe,KAAH,EAAS;AACL,YAAIiF,OAAO,GAAG,MAAMjF,KAAK,CAACkF,WAAN,CAAkBhF,QAAlB,EAA4BR,IAA5B,CAApB;AACAD,QAAAA,aAAa,CAACwF,OAAD,CAAb;;AACA,YAAGA,OAAO,CAACvB,MAAR,KAAmB,CAAtB,EAAwB;AACpBnF,UAAAA,MAAM,CAAC0F,OAAP,CAAe,QAAf,EAAyB;AACrBkB,YAAAA,OAAO,EAAE,0BADY;AAErBC,YAAAA,aAAa,EAAE,eAFM;AAGrBC,YAAAA,YAAY,EAAE,SAHO;AAIrBC,YAAAA,mBAAmB,EAAE,KAJA;AAKrBC,YAAAA,IAAI,EAAE,OALe;AAKN;AACfC,YAAAA,OAAO,EAAE;AANY,WAAzB,EAOIC,IAPJ,CAOUpD,GAAD,IAAS;AACb,gBAAGA,GAAG,CAACqD,OAAJ,KAAgB,IAAnB,EAAwB;AACpBC,cAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ,EADoB,CAErB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACF;AACJ,WAzBF;AA0BH,SA3BD,MA2BO;AACHrH,UAAAA,MAAM,CAAC0F,OAAP,CAAe,QAAf,EAAyB;AACrBkB,YAAAA,OAAO,EAAE,gBAAgBF,OAAO,CAACvB,MAAxB,GAAiC,iBADrB;AAErB6B,YAAAA,IAAI,EAAE,SAFe;AAEJ;AACjBC,YAAAA,OAAO,EAAE;AAHY,WAAzB;AAKH;AACJ;AACJ,KAxCD,MAwCO;AAEH,YAAMK,IAAI,GAAIzE,UAAU,KAAK,OAAhB,GAA2B,IAAI9C,IAAJ,CAASgB,OAAO,CAACwG,MAAR,CAAe,CAAf,EAAkBC,KAA3B,EAAkC1C,oBAAlC,CAA3B,GAAqF,IAAI/E,IAAJ,CAASgB,OAAO,CAACwG,MAAR,CAAe,CAAf,EAAkBC,KAA3B,EAAkC7C,oBAAlC,CAAlG;AACA,YAAM+B,OAAO,GAAGY,IAAI,CAACG,MAAL,CAAY9F,QAAZ,CAAhB;AACA,UAAI+F,gBAAgB,GAAG,EAAvB;;AAEI,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGjB,OAAO,CAACvB,MAA3B,EAAmCwC,CAAC,EAApC,EAAuC;AACnCD,QAAAA,gBAAgB,CAACrC,IAAjB,CAAsB;AAClBO,UAAAA,GAAG,EAAEc,OAAO,CAACiB,CAAD,CAAP,CAAWlC,IAAX,CAAgBhB,EADH;AAElB,kBAAQiC,OAAO,CAACiB,CAAD,CAAP,CAAWlC,IAAX,CAAgBmC;AAFN,SAAtB;AAIH;;AAED,UAAIC,aAAa,GAAG,CAChB;AACInD,QAAAA,KAAK,EAAE,WADX;AAEIoD,QAAAA,SAAS,EAAE,MAFf;AAGIlC,QAAAA,GAAG,EAAE,MAHT;AAIImC,QAAAA,MAAM,EAAE,CAACH,IAAD,EAAOnD,EAAP,kBAAc,oBAAC,MAAD;AAAQ,UAAA,IAAI,EAAC,MAAb;AAAoB,UAAA,OAAO,EAAE,YAAW,MAAMe,aAAa,CAACf,EAAD,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAmEmD,IAAnE;AAJ1B,OADgB,CAApB;AAQAxF,MAAAA,kBAAkB,CAACsF,gBAAD,CAAlB;AACApF,MAAAA,mBAAmB,CAACuF,aAAD,CAAnB;;AAEA,UAAGnB,OAAO,CAACvB,MAAR,KAAmB,CAAtB,EAAwB;AACpBnF,QAAAA,MAAM,CAAC0F,OAAP,CAAe,QAAf,EAAyB;AACrBkB,UAAAA,OAAO,EAAE,0BADY;AAErBI,UAAAA,IAAI,EAAE,OAFe;AAEN;AACfC,UAAAA,OAAO,EAAE;AAHY,SAAzB;AAKH,OAND,MAMO;AACHjH,QAAAA,MAAM,CAAC0F,OAAP,CAAe,QAAf,EAAyB;AACrBkB,UAAAA,OAAO,EAAE,gBAAgBF,OAAO,CAACvB,MAAxB,GAAiC,iBADrB;AAErB6B,UAAAA,IAAI,EAAE,SAFe;AAEJ;AACjBC,UAAAA,OAAO,EAAE;AAHY,SAAzB;AAKH;AACJ;AACJ;;AAELpI,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGwC,SAAH,EAAa;AACT;AACA,UAAI2G,aAAa,GAAG,EAApB;AACA,UAAIC,iBAAiB,GAAG,EAAxB;AACA,UAAIC,cAAc,GAAG,IAAInC,GAAJ,EAArB;AACA,UAAIoC,UAAU,GAAGlF,iBAAjB,CALS,CAK0B;AACnC;;AACAmE,MAAAA,OAAO,CAACC,GAAR,CAAYpG,UAAZ;;AACA,UAAG4B,UAAU,KAAK,UAAlB,EAA6B;AACzB,aAAI,IAAI8E,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG1G,UAAU,CAACkE,MAA9B,EAAsCwC,CAAC,EAAvC,EAA0C;AACtCK,UAAAA,aAAa,CAAC3C,IAAd,CAAmB;AAAC,uBAAWpE,UAAU,CAAC0G,CAAD,CAAV,CAAcS;AAA1B,WAAnB;AAEAC,UAAAA,MAAM,CAACxD,IAAP,CAAYsD,UAAZ,EAAwBG,OAAxB,CAAgC,UAAS1C,GAAT,EAAc;AAE1C,gBAAI2C,SAAS,GAAG3C,GAAG,CAAC4C,KAAJ,CAAU,GAAV,CAAhB;AACA,gBAAIC,aAAa,GAAGC,QAAQ,CAACH,SAAS,CAAC,CAAD,CAAV,CAA5B;AACA,gBAAII,WAAW,GAAGD,QAAQ,CAAEH,SAAS,CAAC,CAAD,CAAX,CAA1B;;AAEA,gBAAGtH,UAAU,CAAC0G,CAAD,CAAV,CAAciB,UAAd,IAA4BH,aAA5B,IAA6CxH,UAAU,CAAC0G,CAAD,CAAV,CAAckB,QAAd,IAA0BF,WAA1E,EAAsF;AAClFT,cAAAA,cAAc,CAAClC,GAAf,CAAmB0C,QAAQ,CAACP,UAAU,CAACvC,GAAD,CAAX,CAA3B;AACH;AAEJ,WAVD,EAHsC,CActC;AACA;AACH;;AACD,YAAG3E,UAAU,CAAC,CAAD,CAAb,EAAiB;AACb;AACAgH,UAAAA,iBAAiB,CAAC5C,IAAlB,CAAuB;AACnBX,YAAAA,KAAK,EAAE,SADY;AAEnBoD,YAAAA,SAAS,EAAE,SAFQ;AAGnBlC,YAAAA,GAAG,EAAE;AAHc,WAAvB,EAFa,CAOb;AACA;AACA;AACA;AACA;AACA;AACA;AACH;AACJ,OAjCD,MAiCO,IAAG/C,UAAU,KAAK,OAAlB,EAA0B,CAEhC;;AACDb,MAAAA,aAAa,CAACgG,aAAD,CAAb;AACA9F,MAAAA,iBAAiB,CAAC+F,iBAAD,CAAjB;AACAvH,MAAAA,iBAAiB,CAAC,KAAD,CAAjB;AACA0G,MAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ,EAAsDa,cAAtD;AACAY,MAAAA,eAAe,CAACZ,cAAD,CAAf;AACH;AACJ,GAnDQ,EAmDN,CAACjH,UAAD,CAnDM,CAAT;;AAsDA,iBAAe6H,eAAf,CAA+BZ,cAA/B,EAA8C;AAC1C,QAAIa,mBAAmB,GAAG7C,KAAK,CAACC,IAAN,CAAW+B,cAAX,CAA1B;AACAlI,IAAAA,MAAM,CAACgJ,GAAP,CAAY,qBAAoBD,mBAAoB,6BAApD,EACC7B,IADD,CACOpD,GAAD,IAAS;AACX,UAAGA,GAAG,CAACmF,IAAP,EAAY;AACR,YAAGnF,GAAG,CAACmF,IAAJ,CAASzB,KAAT,CAAerC,MAAf,GAAwB,CAA3B,EAA6B;AACzB,cAAIuB,OAAO,GAAG5C,GAAG,CAACmF,IAAJ,CAASzB,KAAvB;AACAJ,UAAAA,OAAO,CAACC,GAAR,CAAYX,OAAZ;AACA,cAAIgB,gBAAgB,GAAG,EAAvB;;AAEA,eAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGjB,OAAO,CAACvB,MAA3B,EAAmCwC,CAAC,EAApC,EAAuC;AACnCD,YAAAA,gBAAgB,CAACrC,IAAjB,CAAsB;AAClBO,cAAAA,GAAG,EAAEc,OAAO,CAACiB,CAAD,CAAP,CAAWlD,EADE;AAElB,sBAAQiC,OAAO,CAACiB,CAAD,CAAP,CAAWC;AAFD,aAAtB;AAIH;;AAED,cAAIC,aAAa,GAAG,CAChB;AACInD,YAAAA,KAAK,EAAE,WADX;AAEIoD,YAAAA,SAAS,EAAE,MAFf;AAGIlC,YAAAA,GAAG,EAAE,MAHT;AAIImC,YAAAA,MAAM,EAAE,CAACH,IAAD,EAAOnD,EAAP,kBAAc,oBAAC,MAAD;AAAQ,cAAA,IAAI,EAAC,MAAb;AAAoB,cAAA,OAAO,EAAE,YAAW,MAAMe,aAAa,CAACf,EAAD,CAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAmEmD,IAAnE;AAJ1B,WADgB,CAApB;AAQAxF,UAAAA,kBAAkB,CAACsF,gBAAD,CAAlB;AACApF,UAAAA,mBAAmB,CAACuF,aAAD,CAAnB;AACH;AACJ;AACJ,KA3BD;AA4BH;;AAEDhJ,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGwC,SAAH,EAAa,CACT;AACH;AACJ,GAJQ,EAIN,CAACU,UAAD,CAJM,CAAT;AAMAlD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGwC,SAAH,EAAa,CACT;AACH;AACJ,GAJQ,EAIN,CAACc,eAAD,EAAkBE,gBAAlB,CAJM,CAAT;AAOAxD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGwC,SAAH,EAAa,CACT;AACH;AACJ,GAJQ,EAIN,CAACY,cAAD,CAJM,CAAT;AAMApD,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,QAAGyB,KAAK,CAACuB,QAAT,EAAkB,CACd;AACH;;AACD7B,IAAAA,MAAM,CAACkJ,MAAP,CAAc,SAAd,EAAyBC,UAAzB;AACA3I,IAAAA,cAAc,CAAC,IAAD,CAAd;AACA4I,IAAAA,SAAS;AACTC,IAAAA,iBAAiB;AACjB/H,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACAd,IAAAA,cAAc,CAAC,KAAD,CAAd;AACH,GAXQ,EAWN,EAXM,CAAT;AAaA3B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGwC,SAAH,EAAa;AACTb,MAAAA,cAAc,CAAC,IAAD,CAAd;AACA8I,MAAAA,cAAc;AACdC,MAAAA,UAAU;AACV/I,MAAAA,cAAc,CAAC,KAAD,CAAd,CAJS,CAKT;AACA;AACA;AACH;AAEJ,GAXQ,EAWN,CAACe,OAAD,CAXM,CAAT;AAaA1C,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGwC,SAAH,EAAa;AACTb,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAgJ,MAAAA,UAAU;AACVhJ,MAAAA,cAAc,CAAC,KAAD,CAAd;AACA4G,MAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCtG,OAAhC;AACH;AACJ,GAPQ,EAON,CAACA,OAAD,CAPM,CAAT;AASAlC,EAAAA,SAAS,CAAC,MAAM,CACZ;AACH,GAFQ,EAEN,CAAC0B,WAAD,CAFM,CAAT;AAIA1B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGwC,SAAH,EAAa,CACT;AACH;AACJ,GAJQ,EAIN,CAAC4B,iBAAD,CAJM,CAAT;AAMApE,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGwC,SAAH,EAAa,CACT;AACA;AACH;AACJ,GALQ,EAKN,CAACkC,aAAD,CALM,CAAT;AAOA1E,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGwC,SAAH,EAAa,CACT;AACH;AACJ,GAJQ,EAIN,CAAC0B,YAAD,CAJM,CAAT;AAMAlE,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGwC,SAAH,EAAa,CACT;AACH;AACJ,GAJQ,EAIN,CAACwB,UAAD,CAJM,CAAT;AAMAhE,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGwC,SAAH,EAAa;AACTb,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAgJ,MAAAA,UAAU;AACVhJ,MAAAA,cAAc,CAAC,KAAD,CAAd;AACH;AACJ,GANQ,EAMN,CAACkC,aAAD,EAAgBH,YAAhB,CANM,CAAT;;AAQA,iBAAe6G,SAAf,GAA0B;AACtB,UAAMK,QAAQ,GAAG,MAAMtJ,GAAG,CAACuJ,IAAJ,EAAvB,CADsB,CACa;;AACnChI,IAAAA,QAAQ,CAAC+H,QAAD,CAAR;AACH;;AAED,iBAAeJ,iBAAf,GAAkC;AAC9B,QAAIjD,IAAI,GAAG,MAAMpG,MAAM,CAACqG,OAAP,CAAeC,QAAf,CAAwBqD,OAAxB,CAAgC,KAAhC,CAAjB;;AACA,QAAG,CAACvD,IAAD,IAAS,CAACA,IAAI,CAAC6C,IAAlB,EAAuB;AACnB;AACH,KAFD,MAEO;AACH,UAAG7C,IAAI,CAAC6C,IAAL,CAAUrF,KAAV,KAAoB,IAAvB,EAA4B;AACxB,YAAIkC,OAAO,GAAGM,IAAI,CAAC6C,IAAL,CAAUrF,KAAxB;AACAJ,QAAAA,gBAAgB,CAACgD,IAAI,CAACoD,KAAL,CAAW9D,OAAX,CAAD,CAAhB;AACH;AACJ,KAT6B,CAU9B;AACA;;AACH;;AAED,iBAAe+D,UAAf,GAA2B;AACvB,QAAIzD,IAAI,GAAG,MAAMpG,MAAM,CAACqG,OAAP,CAAeC,QAAf,CAAwBqD,OAAxB,CAAgC,MAAhC,CAAjB;AACA,QAAIG,UAAU,GAAG,EAAjB;;AACA,QAAG,CAAC1D,IAAD,IAAS,CAACA,IAAI,CAAC6C,IAAlB,EAAuB,CACnB;AACA;AACA;AACH,KAJD,MAIO;AACH,UAAG7C,IAAI,CAAC6C,IAAL,CAAUrF,KAAV,KAAoB,IAAvB,EAA4B;AACxBkG,QAAAA,UAAU,GAAGtD,IAAI,CAACoD,KAAL,CAAWxD,IAAI,CAAC6C,IAAL,CAAUrF,KAArB,CAAb;AACAkG,QAAAA,UAAU,CAACzE,IAAX,CAAgB0E,gBAAgB,EAAhC;AACA,YAAIC,QAAQ,GAAG,MAAMhK,MAAM,CAACqG,OAAP,CAAeC,QAAf,CAAwBC,OAAxB,CAAgC,MAAhC,EAAwCC,IAAI,CAACC,SAAL,CAAeqD,UAAf,CAAxC,CAArB;AACH,OAJD,MAIO;AACHA,QAAAA,UAAU,CAACzE,IAAX,CAAgB0E,gBAAgB,EAAhC;AACA,YAAIC,QAAQ,GAAG,MAAMhK,MAAM,CAACqG,OAAP,CAAeC,QAAf,CAAwBC,OAAxB,CAAgC,MAAhC,EAAwCC,IAAI,CAACC,SAAL,CAAeqD,UAAf,CAAxC,CAArB;AACH;AACJ,KAhBsB,CAiBvB;;AACH;;AAED,WAASC,gBAAT,GAA2B;AACvB,QAAIE,MAAM,GAAG;AAAC,eAAStI,QAAV;AAAoB,gBAAUY,YAA9B;AAA4C,iBAAWG,aAAvD;AAAsE,cAAQG;AAA9E,KAAb;AACA,WAAOoH,MAAP;AACH;;AAED,iBAAeT,UAAf,GAA2B;AACvB,QAAIU,MAAM,GAAG,EAAb;AACA,QAAI1C,KAAK,GAAGzG,OAAO,CAACwG,MAAR,CAAe,CAAf,EAAkBC,KAA9B,CAFuB,CAGvB;;AACA,QAAI2C,kBAAkB,GAAG,IAAIpE,GAAJ,CAAQrD,aAAR,CAAzB;AACA,QAAI0H,iBAAiB,GAAG,IAAIrE,GAAJ,CAAQxD,YAAR,CAAxB;AACA,QAAI8H,SAAS,GAAG,EAAhB,CANuB,CAOvB;AACA;AACA;;AACA,QAAIzB,UAAU,GAAG,CAAjB;AACA,QAAIC,QAAQ,GAAG,CAAf;;AACA,SAAI,IAAIlB,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGH,KAAK,CAACrC,MAAzB,EAAiCwC,CAAC,EAAlC,EAAqC;AACjC,UAAIlC,IAAI,GAAG+B,KAAK,CAACG,CAAD,CAAhB;;AACA,UAAGyC,iBAAiB,CAACE,GAAlB,CAAsB7E,IAAI,CAAClB,KAAL,CAAWE,EAAjC,KAAwClC,YAAY,CAAC,CAAD,CAAZ,KAAoB,YAA/D,EAA4E;AACxE,YAAIgI,SAAS,GAAG/C,KAAK,CAACG,CAAD,CAAL,CAASC,IAAzB;AACA,YAAI4C,OAAO,GAAGhD,KAAK,CAACG,CAAD,CAAL,CAASlD,EAAvB,CAFwE,CAGxE;AACA;;AACAmE,QAAAA,UAAU,GAAGsB,MAAM,CAAC/E,MAApB;AACA+E,QAAAA,MAAM,IAAI,gCAAgCK,SAAhC,GAA4C,GAAtD;;AACA,aAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGhF,IAAI,CAACiF,aAAL,CAAmBvF,MAAtC,EAA8CsF,CAAC,EAA/C,EAAkD;AAC9C,cAAIxF,MAAM,GAAGQ,IAAI,CAACiF,aAAL,CAAmBD,CAAnB,CAAb;AACA,cAAIE,WAAW,GAAG1F,MAAM,CAAC+B,IAAzB;AACA,cAAI4D,WAAW,GAAG3F,MAAM,CAACmD,IAAzB;AACA,cAAIyC,SAAS,GAAG5F,MAAM,CAACR,EAAvB,CAJ8C,CAK9C;;AACA,cAAG0F,kBAAkB,CAACG,GAAnB,CAAuBO,SAAvB,KAAqCnI,aAAa,CAAC,CAAD,CAAb,KAAqB,aAA7D,EAA2E;AACvE;AACA,gBAAGiI,WAAW,KAAK,MAAnB,EAA0B;AACtBT,cAAAA,MAAM,IAAIU,WAAV;AACH;;AACD,gBAAGD,WAAW,KAAK,MAAnB,EAA0B;AACtBT,cAAAA,MAAM,IAAI,OAAOK,SAAP,GAAmB,aAAnB,GAAmCK,WAAnC,GAAiD,GAA3D;AACH;;AACD,gBAAGD,WAAW,KAAK,iBAAnB,EAAqC;AACjCT,cAAAA,MAAM,IAAK,OAAOK,SAAP,GAAmB,kBAAnB,GAAwCK,WAAxC,GAAsD,GAAjE;AACH;;AACD,gBAAGC,SAAS,KAAK,QAAjB,EAA0B;AACtBX,cAAAA,MAAM,IAAK,OAAOK,SAAP,GAAmB,gBAAnB,GAAsCK,WAAtC,GAAoD,GAA/D;AACH;AACJ;AACJ;;AACD/B,QAAAA,QAAQ,GAAGqB,MAAM,CAAC/E,MAAP,GAAgB,CAA3B;AACAkF,QAAAA,SAAS,CAAC,CAACzB,UAAD,EAAaC,QAAb,CAAD,CAAT,GAAoC2B,OAApC;AACH;AAEJ;;AACDpJ,IAAAA,OAAO,CAAC8I,MAAD,CAAP;AACAhH,IAAAA,oBAAoB,CAACmH,SAAD,CAApB;AACH;;AAEDxL,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAGwC,SAAH,EAAa;AACT;AACQ+F,MAAAA,OAAO,CAACC,GAAR,CAAYlG,IAAZ;AAEX;AACJ,GANQ,EAMN,CAACA,IAAD,CANM,CAAT;;AAQA,iBAAegI,UAAf,CAA0BrF,GAA1B,EAA8B;AAC1BtC,IAAAA,UAAU,CAACsC,GAAG,CAACmF,IAAJ,CAAS6B,QAAT,CAAkB,CAAlB,CAAD,CAAV;AACH;;AAED,iBAAevB,UAAf,GAA2B;AACvBvJ,IAAAA,MAAM,CAACgJ,GAAP,CAAY,sBAAqBzH,OAAQ,+FAAzC,EACC2F,IADD,CACOpD,GAAD,IAAS;AACX9C,MAAAA,UAAU,CAAC8C,GAAG,CAACmF,IAAL,CAAV,CADW,CAEX;AACH,KAJD;AAKH;;AAED,iBAAeK,cAAf,GAA+B;AAC3BtJ,IAAAA,MAAM,CAACgJ,GAAP,CAAY,uBAAsBzH,OAAQ,kDAA1C,EACC2F,IADD,CACOpD,GAAD,IAAS;AACXlD,MAAAA,cAAc,CAACkD,GAAG,CAACmF,IAAJ,CAAS1B,MAAT,CAAgB,CAAhB,EAAmB9E,MAApB,CAAd;AACA3B,MAAAA,eAAe,CAACgD,GAAG,CAACmF,IAAJ,CAAS1B,MAAT,CAAgB,CAAhB,EAAmB3E,OAApB,CAAf;AACH,KAJD;AAKH;;AAED,WAASmI,kBAAT,CAA4BC,CAA5B,EAA8B;AAC1B,QAAGA,CAAC,CAACC,MAAF,CAASrH,KAAT,KAAmB,KAAtB,EAA4B;AACxBZ,MAAAA,eAAe,CAAC,KAAD,CAAf;AACH,KAFD,MAEO;AACHA,MAAAA,eAAe,CAAC,IAAD,CAAf;AACH;AACJ;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,UAAD;AACI,IAAA,SAAS,EAAC,kBADd;AAEI,IAAA,MAAM,EAAEsC,eAFZ;AAGI,IAAA,KAAK,EAAC,cAHV;AAII,IAAA,QAAQ,EAAC,+BAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAOI;AAAK,IAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACM/E,WAAW,gBACT,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,CAAb;AAAwB,IAAA,OAAO,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,eAAD;AAAiB,IAAA,KAAK,EAAE;AAAE2K,MAAAA,QAAQ,EAAE;AAAZ,KAAxB;AAA0C,IAAA,IAAI,MAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADS,gBAKT,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,YAAD;AACI,IAAA,KAAK,EAAE;AACH9G,MAAAA,KAAK,EAAE,MADJ;AAEH+G,MAAAA,MAAM,EAAE;AAFL,KADX;AAKI,IAAA,QAAQ,EAAEtH,YALd;AAMI,IAAA,WAAW,EAAC,2CANhB;AAOI,IAAA,KAAK,EAAC,OAPV;AAQI,IAAA,IAAI,EAAC,OART;AASI,IAAA,MAAM,eACF,oBAAC,cAAD;AAAgB,MAAA,SAAS,EAAC,qBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAVR;AAYI,IAAA,KAAK,EAAElC,QAZX;AAaI,IAAA,QAAQ,EAAE4D,oBAbd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAeKlC,gBAAgB,CAACiB,GAAjB,CAAsB8G,KAAD,iBAClB,oBAAC,MAAD;AAAQ,IAAA,GAAG,EAAEA,KAAb;AAAoB,IAAA,KAAK,EAAEA,KAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCA,KADD,CADH,CAfL,CADJ,CADJ,eAwBI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,IAAI,EAAC,OAA5B;AAAoC,IAAA,KAAK,EAAC,OAA1C;AAAkD,IAAA,KAAK,MAAvD;AAAwD,IAAA,OAAO,EAAEvF,SAAjE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,CAxBJ,CANR,EAmCStE,OAAO,gBACR;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACG,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,QAAD;AAAU,IAAA,gBAAgB,EAAE,CAAC,GAAD,CAA5B;AAAmC,IAAA,KAAK,MAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,MAAM,EAAC,kBAAd;AAAiC,IAAA,GAAG,EAAC,GAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,EAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADJ,EAEK4C,SAFL,CADJ,eAKI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADJ,EAEKY,UAFL,CALJ,eASI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADJ,EAEKG,gBAFL,CATJ,CADJ,CADJ,CADJ,CADH,CADD,eAuBI,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAG,CAAC,EAAD,EAAK,EAAL,CAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD,CAAO,KAAP;AACI,IAAA,OAAO,EAAExB,mBADb;AAEI,IAAA,QAAQ,EAAEqH,kBAFd;AAGI,IAAA,KAAK,EAAEhI,YAHX;AAII,IAAA,UAAU,EAAC,QAJf;AAKI,IAAA,WAAW,EAAC,OALhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ,eAUI,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,OAAD;AAAS,IAAA,SAAS,EAAC,SAAnB;AAA6B,IAAA,KAAK,EAAC,iCAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAE8G,UAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADJ,CADA,CAVJ,CAvBJ,eAuCI,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEQpJ,cAAc,gBACV,oBAAC,KAAD;AAAO,IAAA,OAAO,MAAd;AAAe,IAAA,UAAU,EAAEsB,UAA3B;AAAuC,IAAA,OAAO,EAAEE,cAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADU,GAGVc,YAAY,gBACR,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAEhB,UAAnB;AAA+B,IAAA,OAAO,EAAEE,cAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADQ,gBAGR,oBAAC,KAAD;AAAO,IAAA,UAAU,EAAEE,eAAnB;AAAoC,IAAA,OAAO,EAAEE,gBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARhB,CADJ,CAvCJ,CADQ,gBAwDH,oBAAC,GAAD;AAAK,IAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEA,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAC,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,KAAD;AACA,IAAA,WAAW,eACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAFA,CA3Fb,CAPJ,CADJ;AAsHH,CArrBD;;AAurBA,eAAehC,UAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory } from \"react-router-dom\";\nimport { Button, PageHeader, Tooltip, AutoComplete, Row, Col, Empty, Select, Collapse, Table, Radio } from 'antd';\nimport { LoadingOutlined, SearchOutlined, BorderlessTableOutlined, BookOutlined } from '@ant-design/icons'\nimport '@tensorflow/tfjs-backend-webgl';\nimport mondaySdk from \"monday-sdk-js\";\nimport Fuse from 'fuse.js'\n\nconst monday = mondaySdk();\nconst { Option } = Select;\nconst { Panel } = Collapse;\n\nconst qna = require(\"@tensorflow-models/qna\")\n\n\nconst SearchView = (props) => {\n\n    const [dataLoading, setDataLoading] = useState(false)\n    const [resultsLoading, setResultsLoading] = useState(false)\n    const [boardGroups, setBoardGroups] = useState([])\n    const [boardColumns, setBoardColumns] = useState([])\n    const [allData, setAllData] = useState({})\n    const [allResults, setAllResults] = useState({})\n    const [wiki, setWiki] = useState(\"\")\n    const [isMounted, setIsMounted] = useState(false)\n    const [boardId, setBoardId] = useState(\"\")\n    const [model, setModel] = useState()\n    const [question, setQuestion] = useState(props.location.state.question ? props.location.state.question : \"\")\n    const [dataSource, setDataSource] = useState([])\n    const [resultsColumns, setResultsColumns] = useState([])\n    const [tableDataSource, setTableDataSource] = useState([])\n    const [tableDataColumns, setTableDataColumns] = useState([])\n    const [searchGroups, setSearchGroups] = useState(props.location.state.groups ? props.location.state.groups : [\"All Groups\"])\n    const [searchColumns, setSearchColumns] = useState(props.location.state.columns ? props.location.state.columns : [\"All Columns\"])\n    const [searchType, setSearchType] = useState(props.location.state.searchType ? props.location.state.searchType : \"question\")\n    const [responseView, setResponseView] = useState(false)\n    const [itemIdToCorpusIdx, setItemIdToCorpusIdx] = useState({})\n    const [itemAllResults, setItemAllResults] = useState({})\n    const [getQAutoComplete, setGetQAutoComplete] = useState([]);\n    const [searchHistory, setSearchHistory] = useState([])\n\n    const backButton = useHistory()\n\n    const optionsWithDisabled = [\n        { label: <BookOutlined />, value: false },\n        { label: <BorderlessTableOutlined />, value: true },\n    ];\n\n\n  const handleSearch = (value) => {\n    let res = searchHistory;\n\n    if (!value) {\n      res.slice(0, 5)\n    } else {\n        res = res.filter(str => str.match(value));\n    }\n\n    setGetQAutoComplete(res);\n  };\n\n    const groupMenu = (\n        <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"select one country\"\n            defaultValue={searchGroups}\n            onChange={getSearchGroups}\n            optionLabelProp=\"label\"\n            value={searchGroups}\n        >    \n        {boardGroups.map(function (group, index){\n            return (\n                <Option value={group.id} label={group.title} key={index}>\n                    <div className=\"demo-option-label-item\">\n                        {group.title}\n                    </div>\n                </Option>\n            )\n        })}\n        </Select>\n    );\n\n    const fuseOptionsWithExact = {\n        // isCaseSensitive: false,\n        // includeScore: false,\n        // shouldSort: true,\n        includeMatches: true,\n        // findAllMatches: false,\n        // minMatchCharLength: 1,\n        // location: 0,\n        // threshold: 0.6,\n        // distance: 100,\n        // useExtendedSearch: false,\n        // ignoreLocation: false,\n        // ignoreFieldNorm: false,\n        keys: [\n          \"name\",\n          \"column_values.text\"\n        ]\n      };\n\n      const fuseOptionsWithFuzzy = {\n        // isCaseSensitive: false,\n        // includeScore: false,\n        // shouldSort: true,\n        includeMatches: true,\n        // findAllMatches: false,\n        // minMatchCharLength: 1,\n        // location: 0,\n        // threshold: 0.6,\n        // distance: 100,\n        // useExtendedSearch: false,\n        // ignoreLocation: false,\n        // ignoreFieldNorm: false,\n        keys: [\n          \"name\",\n          \"column_values.text\"\n        ]\n      };\n      \n\n    const columnMenu = (\n        <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"select one country\"\n            defaultValue={searchColumns}\n            onChange={getSearchColumns}\n            optionLabelProp=\"label\"\n            value={searchColumns}\n        >    \n        {boardColumns.map(function (column, index){\n            return (\n                <Option value={column.id} label={column.title} key={index}>\n                    <div className=\"demo-option-label-item\">\n                        {column.title}\n                    </div>\n                </Option>\n            )\n        })}\n        </Select>\n    );\n      \n    const typeOfSearchMenu = (\n        <Select defaultValue=\"question\" style={{ width: '100%' }} onSelect={(value) => {setSearchType(value)}} >\n            <Option value=\"question\">Ask Anything</Option>\n            <Option value=\"fuzzy\">Fuzzy Search</Option>\n            <Option value=\"keywords\">Match Keywords</Option>\n        </Select>\n    )\n\n    function getSearchColumns(value){\n        if(value.length > 1){\n            if(value[0] === \"All Columns\"){\n                value.splice(0, 1)\n            }\n        }\n        if(value.length === 0){\n            value.push(\"All Columns\")\n        }\n        setSearchColumns(value)\n        // console.log(value)\n    }\n\n    function getSearchGroups(value){\n        if(value.length > 1){\n            if(value[0] === \"All Groups\"){\n                value.splice(0, 1)\n            }\n        }\n        if(value.length === 0){\n            value.push(\"All Groups\")\n        }\n        setSearchGroups(value)\n        // console.log(value)\n    }\n\n    function clickBackButton(){\n        backButton.push('/')\n    }\n\n    function getQuestionFromInput(value){\n\n        setQuestion(value)\n    }\n\n    async function openItemModal(item){\n        // monday.execute\n        // console.log(\"was clicked bahah\", id)\n        monday.execute('openItemCard', { itemId: item.key });\n    }\n\n    async function runSearch(){\n        let history = new Set(searchHistory)\n        history.add(question)\n        let finalHistory = Array.from(history)\n        setSearchHistory(finalHistory)\n        let resp = await monday.storage.instance.setItem('mop', JSON.stringify(finalHistory))\n\n\n        if(searchType === \"question\"){\n            setResultsLoading(true)\n            if(model){\n                let answers = await model.findAnswers(question, wiki)\n                setAllResults(answers)\n                if(answers.length === 0){\n                    monday.execute(\"notice\", { \n                        message: \"No results were found...\",\n                        confirmButton: \"Ask Teammates\",\n                        cancelButton: \"Dismiss\",\n                        excludeCancelButton: false,\n                        type: \"error\", // or \"error\" (red), or \"info\" (blue)\n                        timeout: 10000,\n                     }).then((res) => {\n                         if(res.confirm === true){\n                             console.log(\"Send notification to users\")\n                            // let users = \n                            // monday.api(`\n                            //     mutation {\n                            //         create_notification(\n                            //             text: \"I've got a notification for you!\" + ${question},\n                            //             user_id: ${user_id},\n                            //             target_id: ${item_id},\n                            //             target_type: Project,\n                            //             internal: true\n                            //         ) { \n                            //             id \n                            //         }\n                            //     }\n                            // `);\n                         }\n                     })\n                } else {\n                    monday.execute(\"notice\", { \n                        message: \"There were \" + answers.length + \" results found!\",\n                        type: \"success\", // or \"error\" (red), or \"info\" (blue)\n                        timeout: 10000,\n                     });\n                }\n            }\n        } else {\n\n            const fuse = (searchType === \"fuzzy\") ? new Fuse(allData.boards[0].items, fuseOptionsWithFuzzy) : new Fuse(allData.boards[0].items, fuseOptionsWithExact);\n            const answers = fuse.search(question)\n            let answerDataSource = []\n\n                for(let i = 0; i < answers.length; i++){\n                    answerDataSource.push({\n                        key: answers[i].item.id,\n                        'name': answers[i].item.name\n                    })\n                }  \n\n                let answerColumns = [\n                    {\n                        title: 'Item Name',\n                        dataIndex: 'name',\n                        key: 'name',\n                        render: (name, id) => <Button type=\"link\" onClick={async() => await openItemModal(id) }>{name}</Button>\n                    },\n                ]\n                setTableDataSource(answerDataSource)\n                setTableDataColumns(answerColumns)\n                \n                if(answers.length === 0){\n                    monday.execute(\"notice\", { \n                        message: \"No results were found...\",\n                        type: \"error\", // or \"error\" (red), or \"info\" (blue)\n                        timeout: 10000,\n                     });\n                } else {\n                    monday.execute(\"notice\", { \n                        message: \"There were \" + answers.length + \" results found!\",\n                        type: \"success\", // or \"error\" (red), or \"info\" (blue)\n                        timeout: 10000,\n                    });\n                }\n            }\n        }\n\n    useEffect(() => {\n        if(isMounted){\n            // when results change, update datasource and columns\n            let newDatasource = []\n            let newResultsColumns = []\n            let itemIdsToFetch = new Set()\n            let itemIdxMap = itemIdToCorpusIdx // this is the map\n            // for()\n            console.log(allResults)\n            if(searchType === \"question\"){\n                for(let i = 0; i < allResults.length; i++){\n                    newDatasource.push({'Results': allResults[i].text});\n\n                    Object.keys(itemIdxMap).forEach(function(key) {\n                        \n                        let actualKey = key.split(\",\")\n                        let keyStartIndex = parseInt(actualKey[0])\n                        let keyEndIndex = parseInt( actualKey[1])\n\n                        if(allResults[i].startIndex >= keyStartIndex && allResults[i].endIndex <= keyEndIndex){\n                            itemIdsToFetch.add(parseInt(itemIdxMap[key]))\n                        }\n                        \n                    });\n                    // newDatasource[i]['key'] = i;\n                    // if(allResults[i].start)\n                }\n                if(allResults[0]){\n                    // let cols = Object.keys(allResults[0])\n                    newResultsColumns.push({\n                        title: \"Results\",\n                        dataIndex: \"Results\",\n                        key: \"Results\"\n                    })\n                    // for(let j = 0; j <= cols.length; j++){\n                    //     newResultsColumns.push({\n                    //         title: cols[j],\n                    //         dataIndex: cols[j],\n                    //         key: cols[j],\n                    //     })\n                    // }\n                }\n            } else if(searchType === \"fuzzy\"){\n                \n            }\n            setDataSource(newDatasource)\n            setResultsColumns(newResultsColumns)\n            setResultsLoading(false)\n            console.log(\"IDs that are going to be fetched are: \", itemIdsToFetch)\n            fetchFinalItems(itemIdsToFetch)\n        }\n    }, [allResults])\n\n\n    async function fetchFinalItems(itemIdsToFetch){\n        let arrayItemIdsToFetch = Array.from(itemIdsToFetch)\n        monday.api(`query {items(ids:[${arrayItemIdsToFetch}], limit:10000) {id, name}}`)\n        .then((res) => {\n            if(res.data){\n                if(res.data.items.length > 0){\n                    let answers = res.data.items\n                    console.log(answers)\n                    let answerDataSource = []\n\n                    for(let i = 0; i < answers.length; i++){\n                        answerDataSource.push({\n                            key: answers[i].id,\n                            'name': answers[i].name\n                        })\n                    }  \n    \n                    let answerColumns = [\n                        {\n                            title: 'Item Name',\n                            dataIndex: 'name',\n                            key: 'name',\n                            render: (name, id) => <Button type=\"link\" onClick={async() => await openItemModal(id) }>{name}</Button>\n                        },\n                    ]\n                    setTableDataSource(answerDataSource)\n                    setTableDataColumns(answerColumns)\n                }\n            }\n        })\n    }\n\n    useEffect(() => {\n        if(isMounted){\n            // console.log(dataSource)\n        }\n    }, [dataSource])\n\n    useEffect(() => {\n        if(isMounted){\n            // console.log(dataSource)\n        }\n    }, [tableDataSource, tableDataColumns])\n\n\n    useEffect(() => {\n        if(isMounted){\n            // console.log(resultsColumns)\n        }\n    }, [resultsColumns])\n\n    useEffect(() => {\n        // getBoardId()\n        if(props.location){\n            // console.log(\"This is the question\", props.location.state.question)\n        }\n        monday.listen(\"context\", getContext);\n        setDataLoading(true)\n        loadModel()\n        loadSearchHistory()\n        setIsMounted(true)\n        setDataLoading(false)\n    }, []);\n\n    useEffect(() => {\n        if(isMounted){\n            setDataLoading(true)\n            getBoardGroups()\n            getAllData()\n            setDataLoading(false)\n            // gets triggered whenever boardId changes\n            // getBoardColumns() //\n            // get other stuff dependent on boardId too!\n        }\n\n    }, [boardId])\n\n    useEffect(() => {\n        if(isMounted){\n            setDataLoading(true)\n            createWiki()\n            setDataLoading(false)\n            console.log(\"all board data: \", allData)\n        }\n    }, [allData])\n\n    useEffect(() => {\n        // do nothing\n    }, [dataLoading])\n\n    useEffect(() => {\n        if(isMounted){\n            // add something here?\n        }\n    }, [itemIdToCorpusIdx])\n\n    useEffect(() => {\n        if(isMounted){\n            // add something here?\n            // console.log(searchHistory)\n        }\n    }, [searchHistory])\n\n    useEffect(() => {\n        if(isMounted){\n            // do something here?\n        }\n    }, [responseView])\n\n    useEffect(() => {\n        if(isMounted){\n            // do something here?\n        }\n    }, [searchType])\n\n    useEffect(() => {\n        if(isMounted){\n            setDataLoading(true)\n            createWiki()\n            setDataLoading(false)\n        }\n    }, [searchColumns, searchGroups])\n\n    async function loadModel(){\n        const runModel = await qna.load(); // importing the model\n        setModel(runModel)\n    }\n\n    async function loadSearchHistory(){\n        let resp = await monday.storage.instance.getItem('mop')\n        if(!resp || !resp.data){\n            return\n        } else {\n            if(resp.data.value !== null){\n                let history = resp.data.value;\n                setSearchHistory(JSON.parse(history))\n            }\n        }\n        // console.log(history)\n        // setSearchHistory(history)\n    }\n\n    async function saveSearch(){\n        let resp = await monday.storage.instance.getItem('boop')\n        let savedItems = []\n        if(!resp || !resp.data){\n            // create a new object\n            // do nothing\n            // return\n        } else {\n            if(resp.data.value !== null){\n                savedItems = JSON.parse(resp.data.value);\n                savedItems.push(getParamsForSave())\n                let postResp = await monday.storage.instance.setItem('boop', JSON.stringify(savedItems))\n            } else {\n                savedItems.push(getParamsForSave())\n                let postResp = await monday.storage.instance.setItem('boop', JSON.stringify(savedItems))\n            }\n        }\n        // console.log(savedItems)\n    }\n\n    function getParamsForSave(){\n        let params = {'query': question, 'groups': searchGroups, 'columns': searchColumns, 'type': searchType}\n        return params;\n    }\n\n    async function createWiki(){\n        let corpus = \"\"\n        let items = allData.boards[0].items\n        // let searchColumnIds = searchColumns.map( item => { return item.id })\n        let setSearchColumnIds = new Set(searchColumns)\n        let setSearchGroupIds = new Set(searchGroups)\n        let itemIdMap = {}\n        // console.log(searchColumns)\n        // console.log(setSearchColumnIds)\n        // let column_ids = set(searchColumns)\n        let startIndex = 0\n        let endIndex = 0\n        for(let i = 0; i < items.length; i++){\n            let item = items[i]\n            if(setSearchGroupIds.has(item.group.id) || searchGroups[0] === \"All Groups\"){\n                let item_name = items[i].name\n                let item_id = items[i].id\n                // itemIdMap[item_id] = corpus.length\n                // console.log(itemIdMap)\n                startIndex = corpus.length\n                corpus += \"This is the entry for item \" + item_name + '.'\n                for(let j = 0; j < item.column_values.length; j++){\n                    let column = item.column_values[j]\n                    let column_type = column.type;\n                    let column_text = column.text;\n                    let column_id = column.id;\n                    // console.log(column_id)\n                    if(setSearchColumnIds.has(column_id) || searchColumns[0] === \"All Columns\"){\n                        // This is going to change in a bit\n                        if(column_type === \"text\"){\n                            corpus += column_text;\n                        }\n                        if(column_type === \"date\"){\n                            corpus += \". \" + item_name + \" is due on \" + column_text + \".\"\n                        }\n                        if(column_type === \"multiple-person\"){\n                            corpus +=  \". \" + item_name + \" is assigned to \" + column_text + \".\"\n                        }\n                        if(column_id === \"status\"){\n                            corpus +=  \". \" + item_name + \" task item is \" + column_text + \".\"\n                        }\n                    }\n                }\n                endIndex = corpus.length - 1\n                itemIdMap[[startIndex, endIndex]] = item_id\n            }\n\n        }\n        setWiki(corpus)\n        setItemIdToCorpusIdx(itemIdMap)\n    }\n\n    useEffect(() => {\n        if(isMounted){\n            // do nothing\n                    console.log(wiki)\n\n        }\n    }, [wiki])\n\n    async function getContext(res){\n        setBoardId(res.data.boardIds[0])\n    }\n\n    async function getAllData(){\n        monday.api(`query {boards(ids:[${boardId}]) {items(limit:10000) {id, name, group {id}, column_values {id, text, type, value, title}}}}`)\n        .then((res) => {\n            setAllData(res.data)\n            // console.log(res.data)\n        })\n    }\n\n    async function getBoardGroups(){\n        monday.api(`query { boards(ids: ${boardId}) { columns { id title } groups { id title }} } `)\n        .then((res) => {\n            setBoardGroups(res.data.boards[0].groups)\n            setBoardColumns(res.data.boards[0].columns)\n        })\n    }\n\n    function selectResponseView(e){\n        if(e.target.value === false){\n            setResponseView(false)\n        } else {\n            setResponseView(true)\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            <PageHeader\n                className=\"site-page-header\"\n                onBack={clickBackButton}\n                title=\"Super Search\"\n                subTitle=\"Get answers from your boards!\"\n            />\n            <div className=\"site-statistic-demo-card\">\n                { dataLoading ?      \n                    <Row gutter={[16, 24]}  justify=\"center\">\n                        <LoadingOutlined style={{ fontSize: 48 }} spin />\n                    </Row> \n                    :\n                    <Row gutter={[16, 24]}>\n                        <Col flex=\"auto\">\n                            <AutoComplete\n                                style={{\n                                    width: \"100%\",\n                                    height: \"5em\"\n                                }}\n                                onSearch={handleSearch}\n                                placeholder=\"Search for a question, keyword or pattern\"\n                                shape=\"round\"\n                                size=\"large\"\n                                suffix={\n                                    <SearchOutlined className=\"site-form-item-icon\" />\n                                }\n                                value={question}\n                                onChange={getQuestionFromInput}\n                                >\n                                {getQAutoComplete.map((email) => (\n                                    <Option key={email} value={email}>\n                                    {email}\n                                    </Option>\n                                ))}\n                                </AutoComplete>\n                        </Col>\n                        <Col span={4}>\n                            <Button type=\"primary\" size=\"large\" shape=\"round\" block onClick={runSearch}>Search</Button>\n                        </Col>\n                    </Row>\n                }\n                    {boardId ?\n                    <div className=\"container\">\n                     <Row gutter={[16, 24]}>\n                        <Col flex=\"auto\">\n                            <Collapse defaultActiveKey={['0']} ghost>\n                                <Panel header=\"Advanced Options\" key=\"1\">\n                                    <Row gutter={16}>\n                                        <Col span={8}>\n                                            <label>Select groups</label>\n                                            {groupMenu}\n                                        </Col>\n                                        <Col span={8}>\n                                            <label>Select columns</label>\n                                            {columnMenu}\n                                        </Col>\n                                        <Col span={8}>\n                                            <label>Select type of search</label>\n                                            {typeOfSearchMenu}\n                                        </Col>\n                                    </Row>\n                                </Panel>\n                            </Collapse>\n                        </Col>\n                        </Row>\n                        <Row gutter={ [16, 24]}>\n                            <Col flex=\"auto\">\n                                <Radio.Group\n                                    options={optionsWithDisabled}\n                                    onChange={selectResponseView}\n                                    value={responseView}\n                                    optionType=\"button\"\n                                    buttonStyle=\"solid\"\n                                />\n                            </Col>\n                            <Col>\n                            <Tooltip placement=\"topLeft\" title=\"Click to save search parameters\">\n                                <Button onClick={saveSearch}>Save Search</Button>\n                            </Tooltip>\n                            </Col>\n                        </Row>\n                        <Row gutter={[16, 24]}>\n                            <Col flex=\"auto\">\n                                {\n                                    resultsLoading ?                                     \n                                        <Table loading dataSource={dataSource} columns={resultsColumns} />\n                                    : \n                                        responseView ?\n                                            <Table dataSource={dataSource} columns={resultsColumns} />\n                                        :\n                                            <Table dataSource={tableDataSource} columns={tableDataColumns} />\n                                    }\n                                \n                            </Col>\n                        </Row>\n                        </div>\n                         :  \n                         <Row gutter={[16, 24]}>\n\n                         <Col flex=\"auto\">\n                         <Empty\n                         description={\n                           <span>\n                             Please select a board to continue...\n                           </span>\n                         }\n                       >\n                       </Empty> \n                       </Col>\n                       </Row>\n\n                    }\n            </div>\n        </div>\n    )\n\n}\n\nexport default SearchView;"]},"metadata":{},"sourceType":"module"}