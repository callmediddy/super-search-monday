{"ast":null,"code":"var _jsxFileName = \"/Users/akhand/Developer/power-search/quickstart-react/src/views/SearchView.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Button, PageHeader, Input, Tooltip, AutoComplete, Menu, Row, Col, Empty, Select, Collapse, Table, Radio } from 'antd';\nimport { PlayCircleFilled, DownOutlined, LoadingOutlined, SearchOutlined, BorderlessTableOutlined, BookOutlined } from '@ant-design/icons';\nimport '@tensorflow/tfjs-backend-webgl';\nimport mondaySdk from \"monday-sdk-js\";\nimport Fuse from 'fuse.js';\nconst monday = mondaySdk();\nconst {\n  Search\n} = Input;\nconst {\n  Option\n} = Select;\nconst {\n  Panel\n} = Collapse; // const { Option } = AutoComplete;\n\nconst qna = require(\"@tensorflow-models/qna\");\n\nconst SearchView = props => {\n  const [dataLoading, setDataLoading] = useState(false);\n  const [resultsLoading, setResultsLoading] = useState(false);\n  const [boardGroups, setBoardGroups] = useState([]);\n  const [boardColumns, setBoardColumns] = useState([]);\n  const [allData, setAllData] = useState({});\n  const [allResults, setAllResults] = useState({});\n  const [wiki, setWiki] = useState(\"\");\n  const [isMounted, setIsMounted] = useState(false);\n  const [boardId, setBoardId] = useState(\"\");\n  const [model, setModel] = useState();\n  const [question, setQuestion] = useState(props.location.state.question ? props.location.state.question : \"\");\n  const [dataSource, setDataSource] = useState([]);\n  const [resultsColumns, setResultsColumns] = useState([]);\n  const [tableDataSource, setTableDataSource] = useState([]);\n  const [tableDataColumns, setTableDataColumns] = useState([]);\n  const [searchGroups, setSearchGroups] = useState(props.location.state.groups ? props.location.state.groups : [\"All Groups\"]);\n  const [searchColumns, setSearchColumns] = useState(props.location.state.columns ? props.location.state.columns : [\"All Columns\"]);\n  const [searchType, setSearchType] = useState(props.location.state.searchType ? props.location.state.searchType : \"question\");\n  const [responseView, setResponseView] = useState(false);\n  const [itemIdToCorpusIdx, setItemIdToCorpusIdx] = useState({});\n  const [itemAllResults, setItemAllResults] = useState({});\n  const [getQAutoComplete, setGetQAutoComplete] = useState([]);\n  const [searchHistory, setSearchHistory] = useState([]);\n  const backButton = useHistory();\n  const optionsWithDisabled = [{\n    label: /*#__PURE__*/React.createElement(BookOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 18\n      }\n    }),\n    value: false\n  }, {\n    label: /*#__PURE__*/React.createElement(BorderlessTableOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 18\n      }\n    }),\n    value: true\n  }];\n\n  const handleSearch = value => {\n    let res = searchHistory;\n\n    if (!value) {\n      res.slice(0, 5);\n    } else {\n      res = res.filter(str => str.match(value));\n    }\n\n    setGetQAutoComplete(res);\n  };\n\n  const groupMenu = /*#__PURE__*/React.createElement(Select, {\n    mode: \"multiple\",\n    style: {\n      width: '100%'\n    },\n    placeholder: \"select one country\",\n    defaultValue: searchGroups,\n    onChange: getSearchGroups,\n    optionLabelProp: \"label\",\n    value: searchGroups,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, boardGroups.map(function (group, index) {\n    return /*#__PURE__*/React.createElement(Option, {\n      value: group.id,\n      label: group.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"demo-option-label-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }\n    }, group.title));\n  }));\n  const fuseOptions = {\n    // isCaseSensitive: false,\n    // includeScore: false,\n    // shouldSort: true,\n    // includeMatches: false,\n    // findAllMatches: false,\n    // minMatchCharLength: 1,\n    // location: 0,\n    // threshold: 0.6,\n    // distance: 100,\n    // useExtendedSearch: false,\n    // ignoreLocation: false,\n    // ignoreFieldNorm: false,\n    keys: [\"name\", \"column_values.text\"]\n  };\n  const columnMenu = /*#__PURE__*/React.createElement(Select, {\n    mode: \"multiple\",\n    style: {\n      width: '100%'\n    },\n    placeholder: \"select one country\",\n    defaultValue: searchColumns,\n    onChange: getSearchColumns,\n    optionLabelProp: \"label\",\n    value: searchColumns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 9\n    }\n  }, boardColumns.map(function (column, index) {\n    return /*#__PURE__*/React.createElement(Option, {\n      value: column.id,\n      label: column.title,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"demo-option-label-item\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 21\n      }\n    }, column.title));\n  }));\n  const typeOfSearchMenu = /*#__PURE__*/React.createElement(Select, {\n    defaultValue: \"question\",\n    style: {\n      width: '100%'\n    },\n    onSelect: value => {\n      setSearchType(value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Option, {\n    value: \"question\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, \"Ask Anything\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"keywords\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }, \"Match Keywords\"), /*#__PURE__*/React.createElement(Option, {\n    value: \"regex\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  }, \"Regex Search\"));\n\n  function getSearchColumns(value) {\n    if (value.length > 1) {\n      if (value[0] === \"All Columns\") {\n        value.splice(0, 1);\n      }\n    }\n\n    if (value.length === 0) {\n      value.push(\"All Columns\");\n    }\n\n    setSearchColumns(value); // console.log(value)\n  }\n\n  function getSearchGroups(value) {\n    if (value.length > 1) {\n      if (value[0] === \"All Groups\") {\n        value.splice(0, 1);\n      }\n    }\n\n    if (value.length === 0) {\n      value.push(\"All Groups\");\n    }\n\n    setSearchGroups(value);\n    console.log(value);\n  }\n\n  function clickBackButton() {\n    backButton.push('/');\n  }\n\n  function getQuestionFromInput(value) {\n    setQuestion(value);\n  }\n\n  async function runSearch() {\n    // create Wiki based on groups and columns selected\n    // get search history\n    // add to search history\n    // set search history\n    let history = new Set(searchHistory);\n    history.add(question);\n    let finalHistory = Array.from(history);\n    setSearchHistory(finalHistory);\n    let resp = await monday.storage.instance.setItem('mop', JSON.stringify(finalHistory)); // let resp = await monday.storage.instance.setItem('bert', JSON.stringify({'id': 'bert', 'type': 'model', 'toLoad': 'special', 'toExecute': 'findAnswers', 'columnInputs': [], 'customInputs': ['Your Question']}))\n\n    if (searchType === \"question\") {\n      setResultsLoading(true);\n\n      if (model) {\n        let answers = await model.findAnswers(question, wiki);\n        setAllResults(answers);\n\n        if (answers.length === 0) {\n          monday.execute(\"notice\", {\n            message: \"No results were found...\",\n            type: \"error\",\n            // or \"error\" (red), or \"info\" (blue)\n            timeout: 10000\n          });\n        } else {\n          monday.execute(\"notice\", {\n            message: \"There were \" + answers.length + \" results found!\",\n            type: \"success\",\n            // or \"error\" (red), or \"info\" (blue)\n            timeout: 10000\n          });\n        }\n      }\n    } else if (searchType === \"regex\") {\n      console.log(\"gosh\");\n      console.log(allData.boards[0].items);\n      const fuse = new Fuse(allData.boards[0].items, fuseOptions); // Change the pattern\n      // const pattern = \"poop\"\n\n      console.log(\"Search results are here: \", fuse.search(question));\n    } else {\n      setAllResults({\n        text: \"SUR PLS\"\n      });\n    }\n  }\n\n  useEffect(() => {\n    if (isMounted) {\n      // when results change, update datasource and columns\n      let newDatasource = [];\n      let newResultsColumns = [];\n      let itemIdsToFetch = new Set();\n\n      if (searchType === \"question\") {\n        for (let i = 0; i < allResults.length; i++) {\n          newDatasource.push({\n            'Results': allResults[i].text\n          }); // newDatasource[i]['key'] = i;\n        }\n\n        if (allResults[0]) {\n          // let cols = Object.keys(allResults[0])\n          newResultsColumns.push({\n            title: \"Results\",\n            dataIndex: \"Results\",\n            key: \"Results\"\n          }); // for(let j = 0; j <= cols.length; j++){\n          //     newResultsColumns.push({\n          //         title: cols[j],\n          //         dataIndex: cols[j],\n          //         key: cols[j],\n          //     })\n          // }\n        }\n      } else if (searchType === \"regex\") {}\n\n      setDataSource(newDatasource);\n      setResultsColumns(newResultsColumns);\n      setResultsLoading(false);\n    }\n  }, [allResults]);\n  useEffect(() => {\n    if (isMounted) {\n      console.log(dataSource);\n    }\n  }, [dataSource]);\n  useEffect(() => {\n    if (isMounted) {\n      console.log(resultsColumns);\n    }\n  }, [resultsColumns]);\n  useEffect(() => {\n    // getBoardId()\n    if (props.location) {\n      console.log(\"This is the question\", props.location.state.question);\n    }\n\n    monday.listen(\"context\", getContext);\n    setDataLoading(true);\n    loadModel();\n    loadSearchHistory();\n    setIsMounted(true);\n    setDataLoading(false);\n  }, []);\n  useEffect(() => {\n    if (isMounted) {\n      setDataLoading(true);\n      getBoardGroups();\n      getAllData();\n      setDataLoading(false); // gets triggered whenever boardId changes\n      // getBoardColumns() //\n      // get other stuff dependent on boardId too!\n    }\n  }, [boardId]);\n  useEffect(() => {\n    if (isMounted) {\n      setDataLoading(true);\n      createWiki();\n      setDataLoading(false);\n    }\n  }, [allData]);\n  useEffect(() => {// do nothing\n  }, [dataLoading]);\n  useEffect(() => {\n    if (isMounted) {// add something here?\n    }\n  }, [itemIdToCorpusIdx]);\n  useEffect(() => {\n    if (isMounted) {\n      // add something here?\n      console.log(searchHistory);\n    }\n  }, [searchHistory]);\n  useEffect(() => {\n    if (isMounted) {// do something here?\n    }\n  }, [responseView]);\n  useEffect(() => {\n    if (isMounted) {// do something here?\n    }\n  }, [searchType]);\n  useEffect(() => {\n    if (isMounted) {\n      setDataLoading(true);\n      createWiki();\n      setDataLoading(false);\n    }\n  }, [searchColumns, searchGroups]);\n\n  async function loadModel() {\n    const runModel = await qna.load(); // importing the model\n\n    setModel(runModel);\n  }\n\n  async function loadSearchHistory() {\n    let resp = await monday.storage.instance.getItem('mop');\n\n    if (!resp || !resp.data) {\n      return;\n    } else {\n      if (resp.data.value !== null) {\n        let history = resp.data.value;\n        setSearchHistory(JSON.parse(history));\n      }\n    } // console.log(history)\n    // setSearchHistory(history)\n\n  }\n\n  async function saveSearch() {\n    let resp = await monday.storage.instance.getItem('boop');\n    let savedItems = [];\n\n    if (!resp || !resp.data) {// create a new object\n      // do nothing\n      // return\n    } else {\n      if (resp.data.value !== null) {\n        savedItems = JSON.parse(resp.data.value);\n        savedItems.push(getParamsForSave());\n        let postResp = await monday.storage.instance.setItem('boop', JSON.stringify(savedItems));\n      } else {\n        savedItems.push(getParamsForSave());\n        let postResp = await monday.storage.instance.setItem('boop', JSON.stringify(savedItems));\n      }\n    }\n\n    console.log(savedItems);\n  }\n\n  function getParamsForSave() {\n    let params = {\n      'query': question,\n      'groups': searchGroups,\n      'columns': searchColumns,\n      'type': searchType\n    };\n    return params;\n  }\n\n  async function createWiki() {\n    let corpus = \"\";\n    let items = allData.boards[0].items; // let searchColumnIds = searchColumns.map( item => { return item.id })\n\n    let setSearchColumnIds = new Set(searchColumns);\n    let setSearchGroupIds = new Set(searchGroups);\n    let itemIdMap = {}; // console.log(searchColumns)\n    // console.log(setSearchColumnIds)\n    // let column_ids = set(searchColumns)\n\n    for (let i = 0; i < items.length; i++) {\n      let item = items[i];\n\n      if (setSearchGroupIds.has(item.group.id) || searchGroups[0] === \"All Groups\") {\n        let item_name = items[i].name;\n        let item_id = items[i].id;\n        itemIdMap[item_id] = corpus.length; // console.log(itemIdMap)\n\n        corpus += \"This is the entry for item \" + item_name + '.';\n\n        for (let j = 0; j < item.column_values.length; j++) {\n          let column = item.column_values[j];\n          let column_type = column.type;\n          let column_text = column.text;\n          let column_id = column.id; // console.log(column_id)\n\n          if (setSearchColumnIds.has(column_id) || searchColumns[0] === \"All Columns\") {\n            // This is going to change in a bit\n            if (column_type === \"text\") {\n              corpus += column_text;\n            }\n          }\n        }\n      }\n    }\n\n    setWiki(corpus);\n    setItemIdToCorpusIdx(itemIdMap);\n  }\n\n  useEffect(() => {\n    console.log(wiki);\n  }, [wiki]);\n\n  async function getContext(res) {\n    setBoardId(res.data.boardIds[0]);\n  }\n\n  async function getAllData() {\n    monday.api(`query {boards(ids:[${boardId}]) {items(limit:10000) {id, name, group {id}, column_values {id, text, type, value, title}}}}`).then(res => {\n      setAllData(res.data);\n      console.log(res.data);\n    });\n  }\n\n  async function getBoardGroups() {\n    monday.api(`query { boards(ids: ${boardId}) { columns { id title } groups { id title }} } `).then(res => {\n      setBoardGroups(res.data.boards[0].groups);\n      setBoardColumns(res.data.boards[0].columns);\n    });\n  }\n\n  function selectResponseView(e) {\n    if (e.target.value === false) {\n      setResponseView(false);\n    } else {\n      setResponseView(true);\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(PageHeader, {\n    className: \"site-page-header\",\n    onBack: clickBackButton,\n    title: \"Super Search\",\n    subTitle: \"Get answers from your boards!\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"site-statistic-demo-card\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 13\n    }\n  }, dataLoading ? /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 24],\n    justify: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(LoadingOutlined, {\n    style: {\n      fontSize: 48\n    },\n    spin: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    flex: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(AutoComplete, {\n    style: {\n      width: \"100%\"\n    },\n    onSearch: handleSearch,\n    placeholder: \"Search for a question, keyword or pattern\",\n    shape: \"round\",\n    size: \"large\",\n    suffix: /*#__PURE__*/React.createElement(SearchOutlined, {\n      className: \"site-form-item-icon\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 477,\n        columnNumber: 37\n      }\n    }),\n    value: question,\n    onChange: getQuestionFromInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 29\n    }\n  }, getQAutoComplete.map(email => /*#__PURE__*/React.createElement(Option, {\n    key: email,\n    value: email,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 37\n    }\n  }, email)))), /*#__PURE__*/React.createElement(Col, {\n    span: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    type: \"primary\",\n    size: \"large\",\n    shape: \"round\",\n    block: true,\n    onClick: runSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 29\n    }\n  }, \"Search\"))), boardId ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 496,\n      columnNumber: 22\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    flex: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Collapse, {\n    defaultActiveKey: ['0'],\n    ghost: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Panel, {\n    header: \"Advanced Options\",\n    key: \"1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 499,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    gutter: 16,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 502,\n      columnNumber: 45\n    }\n  }, \"Select groups\"), groupMenu), /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 45\n    }\n  }, \"Select columns\"), columnMenu), /*#__PURE__*/React.createElement(Col, {\n    span: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 41\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 510,\n      columnNumber: 45\n    }\n  }, \"Select type of search\"), typeOfSearchMenu)))))), /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    flex: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 519,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Radio.Group, {\n    options: optionsWithDisabled,\n    onChange: selectResponseView,\n    value: responseView,\n    optionType: \"button\",\n    buttonStyle: \"solid\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 520,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(Col, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Tooltip, {\n    placement: \"topLeft\",\n    title: \"Click to save search parameters\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 529,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: saveSearch,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 33\n    }\n  }, \"Save Search\")))), /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    flex: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 535,\n      columnNumber: 29\n    }\n  }, resultsLoading ? /*#__PURE__*/React.createElement(Table, {\n    loading: true,\n    dataSource: dataSource,\n    columns: resultsColumns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 41\n    }\n  }) : responseView ? /*#__PURE__*/React.createElement(Table, {\n    dataSource: dataSource,\n    columns: resultsColumns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 541,\n      columnNumber: 45\n    }\n  }) : /*#__PURE__*/React.createElement(Table, {\n    dataSource: tableDataSource,\n    columns: tableDataColumns,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 543,\n      columnNumber: 45\n    }\n  })))) : /*#__PURE__*/React.createElement(Row, {\n    gutter: [16, 24],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 550,\n      columnNumber: 26\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    flex: \"auto\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 552,\n      columnNumber: 26\n    }\n  }, /*#__PURE__*/React.createElement(Empty, {\n    description: /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 28\n      }\n    }, \"Please select a board to continue...\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 553,\n      columnNumber: 26\n    }\n  })))));\n};\n\nexport default SearchView;","map":{"version":3,"sources":["/Users/akhand/Developer/power-search/quickstart-react/src/views/SearchView.js"],"names":["React","useState","useEffect","useHistory","useParams","Button","PageHeader","Input","Tooltip","AutoComplete","Menu","Row","Col","Empty","Select","Collapse","Table","Radio","PlayCircleFilled","DownOutlined","LoadingOutlined","SearchOutlined","BorderlessTableOutlined","BookOutlined","mondaySdk","Fuse","monday","Search","Option","Panel","qna","require","SearchView","props","dataLoading","setDataLoading","resultsLoading","setResultsLoading","boardGroups","setBoardGroups","boardColumns","setBoardColumns","allData","setAllData","allResults","setAllResults","wiki","setWiki","isMounted","setIsMounted","boardId","setBoardId","model","setModel","question","setQuestion","location","state","dataSource","setDataSource","resultsColumns","setResultsColumns","tableDataSource","setTableDataSource","tableDataColumns","setTableDataColumns","searchGroups","setSearchGroups","groups","searchColumns","setSearchColumns","columns","searchType","setSearchType","responseView","setResponseView","itemIdToCorpusIdx","setItemIdToCorpusIdx","itemAllResults","setItemAllResults","getQAutoComplete","setGetQAutoComplete","searchHistory","setSearchHistory","backButton","optionsWithDisabled","label","value","handleSearch","res","slice","filter","str","match","groupMenu","width","getSearchGroups","map","group","index","id","title","fuseOptions","keys","columnMenu","getSearchColumns","column","typeOfSearchMenu","length","splice","push","console","log","clickBackButton","getQuestionFromInput","runSearch","history","Set","add","finalHistory","Array","from","resp","storage","instance","setItem","JSON","stringify","answers","findAnswers","execute","message","type","timeout","boards","items","fuse","search","text","newDatasource","newResultsColumns","itemIdsToFetch","i","dataIndex","key","listen","getContext","loadModel","loadSearchHistory","getBoardGroups","getAllData","createWiki","runModel","load","getItem","data","parse","saveSearch","savedItems","getParamsForSave","postResp","params","corpus","setSearchColumnIds","setSearchGroupIds","itemIdMap","item","has","item_name","name","item_id","j","column_values","column_type","column_text","column_id","boardIds","api","then","selectResponseView","e","target","fontSize","email"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Button, PageHeader, Input, Tooltip, AutoComplete, Menu, Row, Col, Empty, Select, Collapse, Table, Radio } from 'antd';\nimport { PlayCircleFilled, DownOutlined, LoadingOutlined, SearchOutlined, BorderlessTableOutlined, BookOutlined } from '@ant-design/icons'\nimport '@tensorflow/tfjs-backend-webgl';\nimport mondaySdk from \"monday-sdk-js\";\nimport Fuse from 'fuse.js'\n\nconst monday = mondaySdk();\nconst { Search } = Input;\nconst { Option } = Select;\nconst { Panel } = Collapse;\n// const { Option } = AutoComplete;\n\nconst qna = require(\"@tensorflow-models/qna\")\n\n\nconst SearchView = (props) => {\n\n    const [dataLoading, setDataLoading] = useState(false)\n    const [resultsLoading, setResultsLoading] = useState(false)\n    const [boardGroups, setBoardGroups] = useState([])\n    const [boardColumns, setBoardColumns] = useState([])\n    const [allData, setAllData] = useState({})\n    const [allResults, setAllResults] = useState({})\n    const [wiki, setWiki] = useState(\"\")\n    const [isMounted, setIsMounted] = useState(false)\n    const [boardId, setBoardId] = useState(\"\")\n    const [model, setModel] = useState()\n    const [question, setQuestion] = useState(props.location.state.question ? props.location.state.question : \"\")\n    const [dataSource, setDataSource] = useState([])\n    const [resultsColumns, setResultsColumns] = useState([])\n    const [tableDataSource, setTableDataSource] = useState([])\n    const [tableDataColumns, setTableDataColumns] = useState([])\n    const [searchGroups, setSearchGroups] = useState(props.location.state.groups ? props.location.state.groups : [\"All Groups\"])\n    const [searchColumns, setSearchColumns] = useState(props.location.state.columns ? props.location.state.columns : [\"All Columns\"])\n    const [searchType, setSearchType] = useState(props.location.state.searchType ? props.location.state.searchType : \"question\")\n    const [responseView, setResponseView] = useState(false)\n    const [itemIdToCorpusIdx, setItemIdToCorpusIdx] = useState({})\n    const [itemAllResults, setItemAllResults] = useState({})\n    const [getQAutoComplete, setGetQAutoComplete] = useState([]);\n    const [searchHistory, setSearchHistory] = useState([])\n\n    const backButton = useHistory()\n\n    const optionsWithDisabled = [\n        { label: <BookOutlined />, value: false },\n        { label: <BorderlessTableOutlined />, value: true },\n    ];\n\n\n  const handleSearch = (value) => {\n    let res = searchHistory;\n\n    if (!value) {\n      res.slice(0, 5)\n    } else {\n        res = res.filter(str => str.match(value));\n    }\n\n    setGetQAutoComplete(res);\n  };\n\n    const groupMenu = (\n        <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"select one country\"\n            defaultValue={searchGroups}\n            onChange={getSearchGroups}\n            optionLabelProp=\"label\"\n            value={searchGroups}\n        >    \n        {boardGroups.map(function (group, index){\n            return (\n                <Option value={group.id} label={group.title}>\n                    <div className=\"demo-option-label-item\">\n                        {group.title}\n                    </div>\n                </Option>\n            )\n        })}\n        </Select>\n    );\n\n    const fuseOptions = {\n        // isCaseSensitive: false,\n        // includeScore: false,\n        // shouldSort: true,\n        // includeMatches: false,\n        // findAllMatches: false,\n        // minMatchCharLength: 1,\n        // location: 0,\n        // threshold: 0.6,\n        // distance: 100,\n        // useExtendedSearch: false,\n        // ignoreLocation: false,\n        // ignoreFieldNorm: false,\n        keys: [\n          \"name\",\n          \"column_values.text\"\n        ]\n      };\n      \n\n    const columnMenu = (\n        <Select\n            mode=\"multiple\"\n            style={{ width: '100%' }}\n            placeholder=\"select one country\"\n            defaultValue={searchColumns}\n            onChange={getSearchColumns}\n            optionLabelProp=\"label\"\n            value={searchColumns}\n        >    \n        {boardColumns.map(function (column, index){\n            return (\n                <Option value={column.id} label={column.title}>\n                    <div className=\"demo-option-label-item\">\n                        {column.title}\n                    </div>\n                </Option>\n            )\n        })}\n        </Select>\n    );\n      \n    const typeOfSearchMenu = (\n        <Select defaultValue=\"question\" style={{ width: '100%' }} onSelect={(value) => {setSearchType(value)}} >\n            <Option value=\"question\">Ask Anything</Option>\n            <Option value=\"keywords\">Match Keywords</Option>\n            <Option value=\"regex\">Regex Search</Option>\n        </Select>\n    )\n\n    function getSearchColumns(value){\n        if(value.length > 1){\n            if(value[0] === \"All Columns\"){\n                value.splice(0, 1)\n            }\n        }\n        if(value.length === 0){\n            value.push(\"All Columns\")\n        }\n        setSearchColumns(value)\n        // console.log(value)\n    }\n\n    function getSearchGroups(value){\n        if(value.length > 1){\n            if(value[0] === \"All Groups\"){\n                value.splice(0, 1)\n            }\n        }\n        if(value.length === 0){\n            value.push(\"All Groups\")\n        }\n        setSearchGroups(value)\n        console.log(value)\n    }\n\n    function clickBackButton(){\n        backButton.push('/')\n    }\n\n    function getQuestionFromInput(value){\n\n        setQuestion(value)\n    }\n\n    async function runSearch(){\n        // create Wiki based on groups and columns selected\n        // get search history\n        // add to search history\n        // set search history\n\n\n        let history = new Set(searchHistory)\n        history.add(question)\n        let finalHistory = Array.from(history)\n        setSearchHistory(finalHistory)\n        let resp = await monday.storage.instance.setItem('mop', JSON.stringify(finalHistory))\n\n        // let resp = await monday.storage.instance.setItem('bert', JSON.stringify({'id': 'bert', 'type': 'model', 'toLoad': 'special', 'toExecute': 'findAnswers', 'columnInputs': [], 'customInputs': ['Your Question']}))\n\n        if(searchType === \"question\"){\n            setResultsLoading(true)\n            if(model){\n                let answers = await model.findAnswers(question, wiki)\n                setAllResults(answers)\n                if(answers.length === 0){\n                    monday.execute(\"notice\", { \n                        message: \"No results were found...\",\n                        type: \"error\", // or \"error\" (red), or \"info\" (blue)\n                        timeout: 10000,\n                     });\n                } else {\n                    monday.execute(\"notice\", { \n                        message: \"There were \" + answers.length + \" results found!\",\n                        type: \"success\", // or \"error\" (red), or \"info\" (blue)\n                        timeout: 10000,\n                     });\n                }\n            }\n        } else if(searchType === \"regex\"){\n            console.log(\"gosh\")\n            console.log(allData.boards[0].items)\n            const fuse = new Fuse(allData.boards[0].items, fuseOptions);\n            // Change the pattern\n            // const pattern = \"poop\"\n\n            \n            console.log(\"Search results are here: \", fuse.search(question))\n        } else {\n            setAllResults({text: \"SUR PLS\"})\n        }\n    }\n\n    useEffect(() => {\n        if(isMounted){\n            // when results change, update datasource and columns\n            let newDatasource = []\n            let newResultsColumns = []\n            let itemIdsToFetch = new Set()\n            if(searchType === \"question\"){\n                for(let i = 0; i < allResults.length; i++){\n                    newDatasource.push({'Results': allResults[i].text});\n                    // newDatasource[i]['key'] = i;\n\n                }\n                if(allResults[0]){\n                    // let cols = Object.keys(allResults[0])\n                    newResultsColumns.push({\n                        title: \"Results\",\n                        dataIndex: \"Results\",\n                        key: \"Results\"\n                    })\n                    // for(let j = 0; j <= cols.length; j++){\n                    //     newResultsColumns.push({\n                    //         title: cols[j],\n                    //         dataIndex: cols[j],\n                    //         key: cols[j],\n                    //     })\n                    // }\n                }\n            } else if(searchType === \"regex\"){\n                \n            }\n            setDataSource(newDatasource)\n            setResultsColumns(newResultsColumns)\n            setResultsLoading(false)\n        }\n    }, [allResults])\n\n    useEffect(() => {\n        if(isMounted){\n            console.log(dataSource)\n        }\n    }, [dataSource])\n\n    useEffect(() => {\n        if(isMounted){\n            console.log(resultsColumns)\n        }\n    }, [resultsColumns])\n\n    useEffect(() => {\n        // getBoardId()\n        if(props.location){\n            console.log(\"This is the question\", props.location.state.question)\n        }\n        monday.listen(\"context\", getContext);\n        setDataLoading(true)\n        loadModel()\n        loadSearchHistory()\n        setIsMounted(true)\n        setDataLoading(false)\n    }, []);\n\n    useEffect(() => {\n        if(isMounted){\n            setDataLoading(true)\n            getBoardGroups()\n            getAllData()\n            setDataLoading(false)\n            // gets triggered whenever boardId changes\n            // getBoardColumns() //\n            // get other stuff dependent on boardId too!\n        }\n\n    }, [boardId])\n\n    useEffect(() => {\n        if(isMounted){\n            setDataLoading(true)\n            createWiki()\n            setDataLoading(false)\n        }\n    }, [allData])\n\n    useEffect(() => {\n        // do nothing\n    }, [dataLoading])\n\n    useEffect(() => {\n        if(isMounted){\n            // add something here?\n        }\n    }, [itemIdToCorpusIdx])\n\n    useEffect(() => {\n        if(isMounted){\n            // add something here?\n            console.log(searchHistory)\n        }\n    }, [searchHistory])\n\n    useEffect(() => {\n        if(isMounted){\n            // do something here?\n        }\n    }, [responseView])\n\n    useEffect(() => {\n        if(isMounted){\n            // do something here?\n        }\n    }, [searchType])\n\n    useEffect(() => {\n        if(isMounted){\n            setDataLoading(true)\n            createWiki()\n            setDataLoading(false)\n        }\n    }, [searchColumns, searchGroups])\n\n    async function loadModel(){\n        const runModel = await qna.load(); // importing the model\n        setModel(runModel)\n    }\n\n    async function loadSearchHistory(){\n        let resp = await monday.storage.instance.getItem('mop')\n        if(!resp || !resp.data){\n            return\n        } else {\n            if(resp.data.value !== null){\n                let history = resp.data.value;\n                setSearchHistory(JSON.parse(history))\n            }\n        }\n        // console.log(history)\n        // setSearchHistory(history)\n    }\n\n    async function saveSearch(){\n        let resp = await monday.storage.instance.getItem('boop')\n        let savedItems = []\n        if(!resp || !resp.data){\n            // create a new object\n            // do nothing\n            // return\n        } else {\n            if(resp.data.value !== null){\n                savedItems = JSON.parse(resp.data.value);\n                savedItems.push(getParamsForSave())\n                let postResp = await monday.storage.instance.setItem('boop', JSON.stringify(savedItems))\n            } else {\n                savedItems.push(getParamsForSave())\n                let postResp = await monday.storage.instance.setItem('boop', JSON.stringify(savedItems))\n            }\n        }\n        console.log(savedItems)\n    }\n\n    function getParamsForSave(){\n        let params = {'query': question, 'groups': searchGroups, 'columns': searchColumns, 'type': searchType}\n        return params;\n    }\n\n    async function createWiki(){\n        let corpus = \"\"\n        let items = allData.boards[0].items\n        // let searchColumnIds = searchColumns.map( item => { return item.id })\n        let setSearchColumnIds = new Set(searchColumns)\n        let setSearchGroupIds = new Set(searchGroups)\n        let itemIdMap = {}\n        // console.log(searchColumns)\n        // console.log(setSearchColumnIds)\n        // let column_ids = set(searchColumns)\n        for(let i = 0; i < items.length; i++){\n            let item = items[i]\n            if(setSearchGroupIds.has(item.group.id) || searchGroups[0] === \"All Groups\"){\n                let item_name = items[i].name\n                let item_id = items[i].id\n                itemIdMap[item_id] = corpus.length\n                // console.log(itemIdMap)\n                corpus += \"This is the entry for item \" + item_name + '.'\n                for(let j = 0; j < item.column_values.length; j++){\n                    let column = item.column_values[j]\n                    let column_type = column.type;\n                    let column_text = column.text;\n                    let column_id = column.id;\n                    // console.log(column_id)\n                    if(setSearchColumnIds.has(column_id) || searchColumns[0] === \"All Columns\"){\n                        // This is going to change in a bit\n                        if(column_type === \"text\"){\n                            corpus += column_text;\n                        }\n                    }\n                }\n            }\n         \n        }\n        setWiki(corpus)\n        setItemIdToCorpusIdx(itemIdMap)\n    }\n\n    useEffect(() => {\n        console.log(wiki)\n    }, [wiki])\n\n    async function getContext(res){\n        setBoardId(res.data.boardIds[0])\n    }\n\n    async function getAllData(){\n        monday.api(`query {boards(ids:[${boardId}]) {items(limit:10000) {id, name, group {id}, column_values {id, text, type, value, title}}}}`)\n        .then((res) => {\n            setAllData(res.data)\n            console.log(res.data)\n        })\n    }\n\n    async function getBoardGroups(){\n        monday.api(`query { boards(ids: ${boardId}) { columns { id title } groups { id title }} } `)\n        .then((res) => {\n            setBoardGroups(res.data.boards[0].groups)\n            setBoardColumns(res.data.boards[0].columns)\n        })\n    }\n\n    function selectResponseView(e){\n        if(e.target.value === false){\n            setResponseView(false)\n        } else {\n            setResponseView(true)\n        }\n    }\n\n    return (\n        <div className=\"container\">\n            <PageHeader\n                className=\"site-page-header\"\n                onBack={clickBackButton}\n                title=\"Super Search\"\n                subTitle=\"Get answers from your boards!\"\n            />\n            <div className=\"site-statistic-demo-card\">\n                { dataLoading ?      \n                    <Row gutter={[16, 24]}  justify=\"center\">\n                        <LoadingOutlined style={{ fontSize: 48 }} spin />\n                    </Row> \n                    :\n                    <Row gutter={[16, 24]}>\n                        <Col flex=\"auto\">\n                            <AutoComplete\n                                style={{\n                                    width: \"100%\",\n                                }}\n                                onSearch={handleSearch}\n                                placeholder=\"Search for a question, keyword or pattern\"\n                                shape=\"round\"\n                                size=\"large\"\n                                suffix={\n                                    <SearchOutlined className=\"site-form-item-icon\" />\n                                }\n                                value={question}\n                                onChange={getQuestionFromInput}\n                                >\n                                {getQAutoComplete.map((email) => (\n                                    <Option key={email} value={email}>\n                                    {email}\n                                    </Option>\n                                ))}\n                                </AutoComplete>\n                        </Col>\n                        <Col span={4}>\n                            <Button type=\"primary\" size=\"large\" shape=\"round\" block onClick={runSearch}>Search</Button>\n                        </Col>\n                    </Row>\n                }\n                    {boardId ?\n                    <div className=\"container\">\n                     <Row gutter={[16, 24]}>\n                        <Col flex=\"auto\">\n                            <Collapse defaultActiveKey={['0']} ghost>\n                                <Panel header=\"Advanced Options\" key=\"1\">\n                                    <Row gutter={16}>\n                                        <Col span={8}>\n                                            <label>Select groups</label>\n                                            {groupMenu}\n                                        </Col>\n                                        <Col span={8}>\n                                            <label>Select columns</label>\n                                            {columnMenu}\n                                        </Col>\n                                        <Col span={8}>\n                                            <label>Select type of search</label>\n                                            {typeOfSearchMenu}\n                                        </Col>\n                                    </Row>\n                                </Panel>\n                            </Collapse>\n                        </Col>\n                        </Row>\n                        <Row gutter={ [16, 24]}>\n                            <Col flex=\"auto\">\n                                <Radio.Group\n                                    options={optionsWithDisabled}\n                                    onChange={selectResponseView}\n                                    value={responseView}\n                                    optionType=\"button\"\n                                    buttonStyle=\"solid\"\n                                />\n                            </Col>\n                            <Col>\n                            <Tooltip placement=\"topLeft\" title=\"Click to save search parameters\">\n                                <Button onClick={saveSearch}>Save Search</Button>\n                            </Tooltip>\n                            </Col>\n                        </Row>\n                        <Row gutter={[16, 24]}>\n                            <Col flex=\"auto\">\n                                {\n                                    resultsLoading ?                                     \n                                        <Table loading dataSource={dataSource} columns={resultsColumns} />\n                                    : \n                                        responseView ?\n                                            <Table dataSource={dataSource} columns={resultsColumns} />\n                                        :\n                                            <Table dataSource={tableDataSource} columns={tableDataColumns} />\n                                    }\n                                \n                            </Col>\n                        </Row>\n                        </div>\n                         :  \n                         <Row gutter={[16, 24]}>\n\n                         <Col flex=\"auto\">\n                         <Empty\n                         description={\n                           <span>\n                             Please select a board to continue...\n                           </span>\n                         }\n                       >\n                       </Empty> \n                       </Col>\n                       </Row>\n\n                    }\n            </div>\n        </div>\n    )\n\n}\n\nexport default SearchView;"]},"metadata":{},"sourceType":"module"}